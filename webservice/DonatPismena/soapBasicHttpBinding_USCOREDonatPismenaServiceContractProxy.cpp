/* soapBasicHttpBinding_USCOREDonatPismenaServiceContractProxy.cpp
   Generated by gSOAP 2.8.17r from DonatPismenaService.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapBasicHttpBinding_USCOREDonatPismenaServiceContractProxy.h"

BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::BasicHttpBinding_USCOREDonatPismenaServiceContractProxy()
{	this->soap = soap_new();
	this->own = true;
	BasicHttpBinding_USCOREDonatPismenaServiceContractProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::BasicHttpBinding_USCOREDonatPismenaServiceContractProxy(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	BasicHttpBinding_USCOREDonatPismenaServiceContractProxy_init(_soap->imode, _soap->omode);
}

BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::BasicHttpBinding_USCOREDonatPismenaServiceContractProxy(const char *url)
{	this->soap = soap_new();
	this->own = true;
	BasicHttpBinding_USCOREDonatPismenaServiceContractProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::BasicHttpBinding_USCOREDonatPismenaServiceContractProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	BasicHttpBinding_USCOREDonatPismenaServiceContractProxy_init(iomode, iomode);
}

BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::BasicHttpBinding_USCOREDonatPismenaServiceContractProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	BasicHttpBinding_USCOREDonatPismenaServiceContractProxy_init(iomode, iomode);
	soap_endpoint = url;
}

BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::BasicHttpBinding_USCOREDonatPismenaServiceContractProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	BasicHttpBinding_USCOREDonatPismenaServiceContractProxy_init(imode, omode);
}

BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::~BasicHttpBinding_USCOREDonatPismenaServiceContractProxy()
{	if (this->own)
		soap_free(this->soap);
}

void BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::BasicHttpBinding_USCOREDonatPismenaServiceContractProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns2", "http://www.t.ht.hr/donat/pismena/service/schemas/rev1.2/", NULL, NULL},
	{"ns1", "http://www.t.ht.hr/donat/pismena/service/definitions/rev1.2/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	BasicHttpBinding_USCOREDonatPismenaServiceContractProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::soap_fault()
{	return this->soap->fault;
}

const char *BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetZahtjevPdf(const char *endpoint, const char *soap_action, ns2__DonatPismenoRequestDataContract *ns1__DonatZahtjevReq, ns2__DonatPismenoPdfDataContract *ns1__PdfResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetZahtjevPdf soap_tmp___ns1__GetZahtjevPdf;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetPdfZahtjev";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetZahtjevPdf.ns1__DonatZahtjevReq = ns1__DonatZahtjevReq;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetZahtjevPdf(soap, &soap_tmp___ns1__GetZahtjevPdf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetZahtjevPdf(soap, &soap_tmp___ns1__GetZahtjevPdf, "-ns1:GetZahtjevPdf", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetZahtjevPdf(soap, &soap_tmp___ns1__GetZahtjevPdf, "-ns1:GetZahtjevPdf", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PdfResponse)
		return soap_closesock(soap);
	ns1__PdfResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PdfResponse->soap_get(soap, "ns1:PdfResponse", "ns2:DonatPismenoPdfDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetZahtjev(const char *endpoint, const char *soap_action, ns2__DonatPismenoRequestDataContract *ns1__DonatZahtjevReq, ns2__DonatPismenoDataContract *ns1__ZahtjevResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetZahtjev soap_tmp___ns1__GetZahtjev;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetZahtjev";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetZahtjev.ns1__DonatZahtjevReq = ns1__DonatZahtjevReq;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetZahtjev(soap, &soap_tmp___ns1__GetZahtjev);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetZahtjev(soap, &soap_tmp___ns1__GetZahtjev, "-ns1:GetZahtjev", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetZahtjev(soap, &soap_tmp___ns1__GetZahtjev, "-ns1:GetZahtjev", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ZahtjevResponse)
		return soap_closesock(soap);
	ns1__ZahtjevResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ZahtjevResponse->soap_get(soap, "ns1:ZahtjevResponse", "ns2:DonatPismenoDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetUgovorPdf(const char *endpoint, const char *soap_action, ns2__DonatPismenoRequestDataContract *ns1__DonatUgovorReq, ns2__DonatPismenoPdfDataContract *ns1__PdfResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetUgovorPdf soap_tmp___ns1__GetUgovorPdf;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetUgovorPdf";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetUgovorPdf.ns1__DonatUgovorReq = ns1__DonatUgovorReq;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetUgovorPdf(soap, &soap_tmp___ns1__GetUgovorPdf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetUgovorPdf(soap, &soap_tmp___ns1__GetUgovorPdf, "-ns1:GetUgovorPdf", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetUgovorPdf(soap, &soap_tmp___ns1__GetUgovorPdf, "-ns1:GetUgovorPdf", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PdfResponse)
		return soap_closesock(soap);
	ns1__PdfResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PdfResponse->soap_get(soap, "ns1:PdfResponse", "ns2:DonatPismenoPdfDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetUgovor(const char *endpoint, const char *soap_action, ns2__DonatPismenoRequestDataContract *ns1__DonatUgovorReq, ns2__DonatPismenoDataContract *ns1__UgovorResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetUgovor soap_tmp___ns1__GetUgovor;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetUgovor";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetUgovor.ns1__DonatUgovorReq = ns1__DonatUgovorReq;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetUgovor(soap, &soap_tmp___ns1__GetUgovor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetUgovor(soap, &soap_tmp___ns1__GetUgovor, "-ns1:GetUgovor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetUgovor(soap, &soap_tmp___ns1__GetUgovor, "-ns1:GetUgovor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UgovorResponse)
		return soap_closesock(soap);
	ns1__UgovorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UgovorResponse->soap_get(soap, "ns1:UgovorResponse", "ns2:DonatPismenoDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetPrivolaPdf(const char *endpoint, const char *soap_action, LONG64 ns1__KupacId, ns2__DonatPismenoPdfDataContract *ns1__PdfResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetPrivolaPdf soap_tmp___ns1__GetPrivolaPdf;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetPrivolaPdf";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetPrivolaPdf.ns1__KupacId = ns1__KupacId;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetPrivolaPdf(soap, &soap_tmp___ns1__GetPrivolaPdf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetPrivolaPdf(soap, &soap_tmp___ns1__GetPrivolaPdf, "-ns1:GetPrivolaPdf", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetPrivolaPdf(soap, &soap_tmp___ns1__GetPrivolaPdf, "-ns1:GetPrivolaPdf", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PdfResponse)
		return soap_closesock(soap);
	ns1__PdfResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PdfResponse->soap_get(soap, "ns1:PdfResponse", "ns2:DonatPismenoPdfDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetPrivola(const char *endpoint, const char *soap_action, LONG64 ns1__KupacId, ns2__DonatPismenoDataContract *ns1__PrivolaResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetPrivola soap_tmp___ns1__GetPrivola;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetPrivola";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetPrivola.ns1__KupacId = ns1__KupacId;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetPrivola(soap, &soap_tmp___ns1__GetPrivola);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetPrivola(soap, &soap_tmp___ns1__GetPrivola, "-ns1:GetPrivola", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetPrivola(soap, &soap_tmp___ns1__GetPrivola, "-ns1:GetPrivola", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PrivolaResponse)
		return soap_closesock(soap);
	ns1__PrivolaResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PrivolaResponse->soap_get(soap, "ns1:PrivolaResponse", "ns2:DonatPismenoDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetObavijestPdf(const char *endpoint, const char *soap_action, ns2__DonatPismenoRequestDataContract *ns1__DonatObavijestReq, ns2__DonatPismenoPdfDataContract *ns1__PdfResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetObavijestPdf soap_tmp___ns1__GetObavijestPdf;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetObavijestPdf";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetObavijestPdf.ns1__DonatObavijestReq = ns1__DonatObavijestReq;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetObavijestPdf(soap, &soap_tmp___ns1__GetObavijestPdf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetObavijestPdf(soap, &soap_tmp___ns1__GetObavijestPdf, "-ns1:GetObavijestPdf", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetObavijestPdf(soap, &soap_tmp___ns1__GetObavijestPdf, "-ns1:GetObavijestPdf", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PdfResponse)
		return soap_closesock(soap);
	ns1__PdfResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PdfResponse->soap_get(soap, "ns1:PdfResponse", "ns2:DonatPismenoPdfDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetObavijest(const char *endpoint, const char *soap_action, ns2__DonatPismenoRequestDataContract *ns1__DonatObavijestReq, ns2__DonatPismenoDataContract *ns1__ObavijestResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetObavijest soap_tmp___ns1__GetObavijest;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetObavijest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetObavijest.ns1__DonatObavijestReq = ns1__DonatObavijestReq;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetObavijest(soap, &soap_tmp___ns1__GetObavijest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetObavijest(soap, &soap_tmp___ns1__GetObavijest, "-ns1:GetObavijest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetObavijest(soap, &soap_tmp___ns1__GetObavijest, "-ns1:GetObavijest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ObavijestResponse)
		return soap_closesock(soap);
	ns1__ObavijestResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ObavijestResponse->soap_get(soap, "ns1:ObavijestResponse", "ns2:DonatPismenoDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetPismoPdf(const char *endpoint, const char *soap_action, ns2__DonatPismenoRequestDataContract *ns1__DonatPismoReq, ns2__DonatPismenoPdfDataContract *ns1__PdfResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetPismoPdf soap_tmp___ns1__GetPismoPdf;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetPismoPdf";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetPismoPdf.ns1__DonatPismoReq = ns1__DonatPismoReq;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetPismoPdf(soap, &soap_tmp___ns1__GetPismoPdf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetPismoPdf(soap, &soap_tmp___ns1__GetPismoPdf, "-ns1:GetPismoPdf", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetPismoPdf(soap, &soap_tmp___ns1__GetPismoPdf, "-ns1:GetPismoPdf", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PdfResponse)
		return soap_closesock(soap);
	ns1__PdfResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PdfResponse->soap_get(soap, "ns1:PdfResponse", "ns2:DonatPismenoPdfDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetPismo(const char *endpoint, const char *soap_action, ns2__DonatPismenoRequestDataContract *ns1__DonatPismoReq, ns2__DonatPismenoDataContract *ns1__PismoResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetPismo soap_tmp___ns1__GetPismo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetPismo";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetPismo.ns1__DonatPismoReq = ns1__DonatPismoReq;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetPismo(soap, &soap_tmp___ns1__GetPismo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetPismo(soap, &soap_tmp___ns1__GetPismo, "-ns1:GetPismo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetPismo(soap, &soap_tmp___ns1__GetPismo, "-ns1:GetPismo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PismoResponse)
		return soap_closesock(soap);
	ns1__PismoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PismoResponse->soap_get(soap, "ns1:PismoResponse", "ns2:DonatPismenoDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetOdbijenicaPdf(const char *endpoint, const char *soap_action, ns2__DonatPismenoRequestDataContract *ns1__DonatOdbijenicaReq, ns2__DonatPismenoPdfDataContract *ns1__PdfResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetOdbijenicaPdf soap_tmp___ns1__GetOdbijenicaPdf;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetOdbijenicaPdf";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetOdbijenicaPdf.ns1__DonatOdbijenicaReq = ns1__DonatOdbijenicaReq;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetOdbijenicaPdf(soap, &soap_tmp___ns1__GetOdbijenicaPdf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetOdbijenicaPdf(soap, &soap_tmp___ns1__GetOdbijenicaPdf, "-ns1:GetOdbijenicaPdf", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetOdbijenicaPdf(soap, &soap_tmp___ns1__GetOdbijenicaPdf, "-ns1:GetOdbijenicaPdf", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PdfResponse)
		return soap_closesock(soap);
	ns1__PdfResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PdfResponse->soap_get(soap, "ns1:PdfResponse", "ns2:DonatPismenoPdfDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetOdbijenica(const char *endpoint, const char *soap_action, ns2__DonatPismenoRequestDataContract *ns1__DonatOdbijenicaReq, ns2__DonatPismenoDataContract *ns1__OdbijenicaResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetOdbijenica soap_tmp___ns1__GetOdbijenica;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetOdbijenica";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetOdbijenica.ns1__DonatOdbijenicaReq = ns1__DonatOdbijenicaReq;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetOdbijenica(soap, &soap_tmp___ns1__GetOdbijenica);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetOdbijenica(soap, &soap_tmp___ns1__GetOdbijenica, "-ns1:GetOdbijenica", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetOdbijenica(soap, &soap_tmp___ns1__GetOdbijenica, "-ns1:GetOdbijenica", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__OdbijenicaResponse)
		return soap_closesock(soap);
	ns1__OdbijenicaResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__OdbijenicaResponse->soap_get(soap, "ns1:OdbijenicaResponse", "ns2:DonatPismenoDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetUgovornaObvezaPdf(const char *endpoint, const char *soap_action, LONG64 ns1__GrupaImovineId, LONG64 ns1__KupacId, ns2__DonatPismenoPdfDataContract *ns1__PdfResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetUgovornaObvezaPdf soap_tmp___ns1__GetUgovornaObvezaPdf;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetUgovornaObvezaPdf";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetUgovornaObvezaPdf.ns1__GrupaImovineId = ns1__GrupaImovineId;
	soap_tmp___ns1__GetUgovornaObvezaPdf.ns1__KupacId = ns1__KupacId;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetUgovornaObvezaPdf(soap, &soap_tmp___ns1__GetUgovornaObvezaPdf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetUgovornaObvezaPdf(soap, &soap_tmp___ns1__GetUgovornaObvezaPdf, "-ns1:GetUgovornaObvezaPdf", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetUgovornaObvezaPdf(soap, &soap_tmp___ns1__GetUgovornaObvezaPdf, "-ns1:GetUgovornaObvezaPdf", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PdfResponse)
		return soap_closesock(soap);
	ns1__PdfResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PdfResponse->soap_get(soap, "ns1:PdfResponse", "ns2:DonatPismenoPdfDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetUgovornaObveza(const char *endpoint, const char *soap_action, LONG64 ns1__GrupaImovineId, LONG64 ns1__KupacId, ns2__DonatPismenoDataContract *ns1__UgovornaObvezaResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetUgovornaObveza soap_tmp___ns1__GetUgovornaObveza;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetUgovornaObveza";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetUgovornaObveza.ns1__GrupaImovineId = ns1__GrupaImovineId;
	soap_tmp___ns1__GetUgovornaObveza.ns1__KupacId = ns1__KupacId;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetUgovornaObveza(soap, &soap_tmp___ns1__GetUgovornaObveza);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetUgovornaObveza(soap, &soap_tmp___ns1__GetUgovornaObveza, "-ns1:GetUgovornaObveza", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetUgovornaObveza(soap, &soap_tmp___ns1__GetUgovornaObveza, "-ns1:GetUgovornaObveza", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UgovornaObvezaResponse)
		return soap_closesock(soap);
	ns1__UgovornaObvezaResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UgovornaObvezaResponse->soap_get(soap, "ns1:UgovornaObvezaResponse", "ns2:DonatPismenoDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetTrajniNalogPdf(const char *endpoint, const char *soap_action, ns2__DonatPismenoRequestDataContract *ns1__DonatTrajniNalogReq, ns2__DonatPismenoPdfDataContract *ns1__PdfResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetTrajniNalogPdf soap_tmp___ns1__GetTrajniNalogPdf;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetTrajniNalogPdf";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetTrajniNalogPdf.ns1__DonatTrajniNalogReq = ns1__DonatTrajniNalogReq;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetTrajniNalogPdf(soap, &soap_tmp___ns1__GetTrajniNalogPdf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetTrajniNalogPdf(soap, &soap_tmp___ns1__GetTrajniNalogPdf, "-ns1:GetTrajniNalogPdf", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetTrajniNalogPdf(soap, &soap_tmp___ns1__GetTrajniNalogPdf, "-ns1:GetTrajniNalogPdf", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PdfResponse)
		return soap_closesock(soap);
	ns1__PdfResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PdfResponse->soap_get(soap, "ns1:PdfResponse", "ns2:DonatPismenoPdfDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetTrajniNalog(const char *endpoint, const char *soap_action, ns2__DonatPismenoRequestDataContract *ns1__DonatTrajniNalogReq, ns2__DonatPismenoDataContract *ns1__TrajniNalogResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetTrajniNalog soap_tmp___ns1__GetTrajniNalog;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetTrajniNalog";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetTrajniNalog.ns1__DonatTrajniNalogReq = ns1__DonatTrajniNalogReq;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetTrajniNalog(soap, &soap_tmp___ns1__GetTrajniNalog);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetTrajniNalog(soap, &soap_tmp___ns1__GetTrajniNalog, "-ns1:GetTrajniNalog", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetTrajniNalog(soap, &soap_tmp___ns1__GetTrajniNalog, "-ns1:GetTrajniNalog", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__TrajniNalogResponse)
		return soap_closesock(soap);
	ns1__TrajniNalogResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__TrajniNalogResponse->soap_get(soap, "ns1:TrajniNalogResponse", "ns2:DonatPismenoDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetSplitContractPdf(const char *endpoint, const char *soap_action, ns2__DonatPismenoRequestDataContract *ns1__DonatSplitContractReq, ns2__DonatPismenoPdfDataContract *ns1__PdfResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetSplitContractPdf soap_tmp___ns1__GetSplitContractPdf;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetPdfSplitContract";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetSplitContractPdf.ns1__DonatSplitContractReq = ns1__DonatSplitContractReq;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSplitContractPdf(soap, &soap_tmp___ns1__GetSplitContractPdf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSplitContractPdf(soap, &soap_tmp___ns1__GetSplitContractPdf, "-ns1:GetSplitContractPdf", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSplitContractPdf(soap, &soap_tmp___ns1__GetSplitContractPdf, "-ns1:GetSplitContractPdf", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PdfResponse)
		return soap_closesock(soap);
	ns1__PdfResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PdfResponse->soap_get(soap, "ns1:PdfResponse", "ns2:DonatPismenoPdfDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetSplitContract(const char *endpoint, const char *soap_action, ns2__DonatPismenoRequestDataContract *ns1__DonatSplitContractReq, ns2__DonatPismenoDataContract *ns1__SplitContractResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetSplitContract soap_tmp___ns1__GetSplitContract;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetSplitContract";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetSplitContract.ns1__DonatSplitContractReq = ns1__DonatSplitContractReq;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSplitContract(soap, &soap_tmp___ns1__GetSplitContract);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSplitContract(soap, &soap_tmp___ns1__GetSplitContract, "-ns1:GetSplitContract", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSplitContract(soap, &soap_tmp___ns1__GetSplitContract, "-ns1:GetSplitContract", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SplitContractResponse)
		return soap_closesock(soap);
	ns1__SplitContractResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SplitContractResponse->soap_get(soap, "ns1:SplitContractResponse", "ns2:DonatPismenoDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetZlonamjerniPdf(const char *endpoint, const char *soap_action, LONG64 ns1__ZlonamjerniId, ns2__DonatPismenoPdfDataContract *ns1__PdfResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetZlonamjerniPdf soap_tmp___ns1__GetZlonamjerniPdf;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetZlonamjerniPdf";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetZlonamjerniPdf.ns1__ZlonamjerniId = ns1__ZlonamjerniId;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetZlonamjerniPdf(soap, &soap_tmp___ns1__GetZlonamjerniPdf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetZlonamjerniPdf(soap, &soap_tmp___ns1__GetZlonamjerniPdf, "-ns1:GetZlonamjerniPdf", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetZlonamjerniPdf(soap, &soap_tmp___ns1__GetZlonamjerniPdf, "-ns1:GetZlonamjerniPdf", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PdfResponse)
		return soap_closesock(soap);
	ns1__PdfResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PdfResponse->soap_get(soap, "ns1:PdfResponse", "ns2:DonatPismenoPdfDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetZlonamjerni(const char *endpoint, const char *soap_action, LONG64 ns1__ZlonamjerniId, ns2__DonatPismenoDataContract *ns1__ZlonamjerniResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetZlonamjerni soap_tmp___ns1__GetZlonamjerni;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetZlonamjerni";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetZlonamjerni.ns1__ZlonamjerniId = ns1__ZlonamjerniId;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetZlonamjerni(soap, &soap_tmp___ns1__GetZlonamjerni);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetZlonamjerni(soap, &soap_tmp___ns1__GetZlonamjerni, "-ns1:GetZlonamjerni", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetZlonamjerni(soap, &soap_tmp___ns1__GetZlonamjerni, "-ns1:GetZlonamjerni", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ZlonamjerniResponse)
		return soap_closesock(soap);
	ns1__ZlonamjerniResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ZlonamjerniResponse->soap_get(soap, "ns1:ZlonamjerniResponse", "ns2:DonatPismenoDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetPrigovorPdf(const char *endpoint, const char *soap_action, LONG64 ns1__PrigovorId, ns2__DonatPismenoPdfDataContract *ns1__PdfResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetPrigovorPdf soap_tmp___ns1__GetPrigovorPdf;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetPrigovorPdf";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetPrigovorPdf.ns1__PrigovorId = ns1__PrigovorId;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetPrigovorPdf(soap, &soap_tmp___ns1__GetPrigovorPdf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetPrigovorPdf(soap, &soap_tmp___ns1__GetPrigovorPdf, "-ns1:GetPrigovorPdf", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetPrigovorPdf(soap, &soap_tmp___ns1__GetPrigovorPdf, "-ns1:GetPrigovorPdf", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PdfResponse)
		return soap_closesock(soap);
	ns1__PdfResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PdfResponse->soap_get(soap, "ns1:PdfResponse", "ns2:DonatPismenoPdfDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREDonatPismenaServiceContractProxy::GetPrigovor(const char *endpoint, const char *soap_action, LONG64 ns1__PrigovorId, ns2__DonatPismenoDataContract *ns1__PrigovorResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetPrigovor soap_tmp___ns1__GetPrigovor;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://sdonatwebt.ad.local/DonatPismena/DonatPismenaService.svc";
	if (soap_action == NULL)
		soap_action = "GetPrigovor";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetPrigovor.ns1__PrigovorId = ns1__PrigovorId;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetPrigovor(soap, &soap_tmp___ns1__GetPrigovor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetPrigovor(soap, &soap_tmp___ns1__GetPrigovor, "-ns1:GetPrigovor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetPrigovor(soap, &soap_tmp___ns1__GetPrigovor, "-ns1:GetPrigovor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PrigovorResponse)
		return soap_closesock(soap);
	ns1__PrigovorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PrigovorResponse->soap_get(soap, "ns1:PrigovorResponse", "ns2:DonatPismenoDataContract");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
