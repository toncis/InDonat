/* soapH.h
   Generated by gSOAP 2.8.17r from DonatPismenaService.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__byte
#define SOAP_TYPE_xsd__byte (16)
#endif

#define soap_default_xsd__byte(soap, a) soap_default_byte(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_xsd__byte
#define soap_write_xsd__byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__byte(soap, data),0) || soap_put_xsd__byte(soap, data, "xsd:byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_xsd__byte
#define soap_read_xsd__byte(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_short
#define SOAP_TYPE_short (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap*, short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

#ifndef soap_write_short
#define soap_write_short(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_short(soap, data),0) || soap_put_short(soap, data, "short", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

#ifndef soap_read_short
#define soap_read_short(soap, data) ( soap_begin_recv(soap) || !soap_get_short(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_LONG64
#define SOAP_TYPE_LONG64 (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_LONG64(soap, data),0) || soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (20)
#endif
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__duration(struct soap*, LONG64 *);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__duration2s(struct soap*, LONG64);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__duration(struct soap*, const char*, int, const LONG64 *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__duration(struct soap*, const char*, LONG64 *);
SOAP_FMAC1 LONG64 * SOAP_FMAC2 soap_in_xsd__duration(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_xsd__duration
#define soap_write_xsd__duration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__duration(soap, data),0) || soap_put_xsd__duration(soap, data, "xsd:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_xsd__duration
#define soap_read_xsd__duration(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__duration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

#ifndef soap_write_float
#define soap_write_float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_float(soap, data),0) || soap_put_float(soap, data, "float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

#ifndef soap_read_float
#define soap_read_float(soap, data) ( soap_begin_recv(soap) || !soap_get_float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_double(soap, data),0) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__unsignedByte
#define SOAP_TYPE_xsd__unsignedByte (21)
#endif

#define soap_default_xsd__unsignedByte(soap, a) soap_default_unsignedByte(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_xsd__unsignedByte
#define soap_write_xsd__unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__unsignedByte(soap, data),0) || soap_put_xsd__unsignedByte(soap, data, "xsd:unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_xsd__unsignedByte
#define soap_read_xsd__unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedByte(soap, data),0) || soap_put_unsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedShort
#define SOAP_TYPE_unsignedShort (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap*, unsigned short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap*, const char*, int, const unsigned short *, const char*);
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap*, const char*, unsigned short *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap*, const unsigned short *, const char*, const char*);

#ifndef soap_write_unsignedShort
#define soap_write_unsignedShort(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedShort(soap, data),0) || soap_put_unsignedShort(soap, data, "unsignedShort", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap*, unsigned short *, const char*, const char*);

#ifndef soap_read_unsignedShort
#define soap_read_unsignedShort(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedShort(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedInt(soap, data),0) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedLONG64
#define SOAP_TYPE_unsignedLONG64 (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap*, ULONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap*, const ULONG64 *, const char*, const char*);

#ifndef soap_write_unsignedLONG64
#define soap_write_unsignedLONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedLONG64(soap, data),0) || soap_put_unsignedLONG64(soap, data, "unsignedLong", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap*, ULONG64 *, const char*, const char*);

#ifndef soap_read_unsignedLONG64
#define soap_read_unsignedLONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedLONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_time
#define SOAP_TYPE_time (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_time
#define soap_write_time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_time(soap, data),0) || soap_put_time(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_time
#define soap_read_time(soap, data) ( soap_begin_recv(soap) || !soap_get_time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data),0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__DonatPismenoMetadataDataContract
#define SOAP_TYPE_ns2__DonatPismenoMetadataDataContract (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DonatPismenoMetadataDataContract(struct soap*, const char*, int, const ns2__DonatPismenoMetadataDataContract *, const char*);
SOAP_FMAC3 ns2__DonatPismenoMetadataDataContract * SOAP_FMAC4 soap_in_ns2__DonatPismenoMetadataDataContract(struct soap*, const char*, ns2__DonatPismenoMetadataDataContract *, const char*);

#ifndef soap_write_ns2__DonatPismenoMetadataDataContract
#define soap_write_ns2__DonatPismenoMetadataDataContract(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:DonatPismenoMetadataDataContract", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DonatPismenoMetadataDataContract * SOAP_FMAC4 soap_get_ns2__DonatPismenoMetadataDataContract(struct soap*, ns2__DonatPismenoMetadataDataContract *, const char*, const char*);

#ifndef soap_read_ns2__DonatPismenoMetadataDataContract
#define soap_read_ns2__DonatPismenoMetadataDataContract(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DonatPismenoMetadataDataContract(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DonatPismenoMetadataDataContract * SOAP_FMAC2 soap_instantiate_ns2__DonatPismenoMetadataDataContract(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DonatPismenoMetadataDataContract * soap_new_ns2__DonatPismenoMetadataDataContract(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DonatPismenoMetadataDataContract(soap, n, NULL, NULL, NULL); }

inline ns2__DonatPismenoMetadataDataContract * soap_new_req_ns2__DonatPismenoMetadataDataContract(struct soap *soap) { ns2__DonatPismenoMetadataDataContract *_p = soap_instantiate_ns2__DonatPismenoMetadataDataContract(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__DonatPismenoMetadataDataContract * soap_new_set_ns2__DonatPismenoMetadataDataContract(struct soap *soap, std::string *Oib, std::string *JopNumber, std::string *Mb, std::string *CustomerType, std::string *CaseFileNumber, std::string *RefNo, std::string *Application, std::string *RequestCode, std::string *RequestType, std::string *DocumentType, std::string *DocumentNumber, std::string *UserName, std::string *AgentName, std::string *PartnerAddress, std::string *CustomerName, std::string *UserId1, std::string *UserId2, std::string *ContractDate, std::string *OriginalCopy, std::string *ElectronicSign, std::string *AdditionalInfo, std::string *DocumentTypeId, std::string *AccountId, std::string *ContractId, std::string *Kp, std::string *StrankaId, int *Pages, std::string *FileMedia, std::string *TableSign, std::string *Pib, std::string *SalesChannel, std::string *FileNetId, char *__item1) { ns2__DonatPismenoMetadataDataContract *_p = soap_instantiate_ns2__DonatPismenoMetadataDataContract(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DonatPismenoMetadataDataContract::Oib = Oib; _p->ns2__DonatPismenoMetadataDataContract::JopNumber = JopNumber; _p->ns2__DonatPismenoMetadataDataContract::Mb = Mb; _p->ns2__DonatPismenoMetadataDataContract::CustomerType = CustomerType; _p->ns2__DonatPismenoMetadataDataContract::CaseFileNumber = CaseFileNumber; _p->ns2__DonatPismenoMetadataDataContract::RefNo = RefNo; _p->ns2__DonatPismenoMetadataDataContract::Application = Application; _p->ns2__DonatPismenoMetadataDataContract::RequestCode = RequestCode; _p->ns2__DonatPismenoMetadataDataContract::RequestType = RequestType; _p->ns2__DonatPismenoMetadataDataContract::DocumentType = DocumentType; _p->ns2__DonatPismenoMetadataDataContract::DocumentNumber = DocumentNumber; _p->ns2__DonatPismenoMetadataDataContract::UserName = UserName; _p->ns2__DonatPismenoMetadataDataContract::AgentName = AgentName; _p->ns2__DonatPismenoMetadataDataContract::PartnerAddress = PartnerAddress; _p->ns2__DonatPismenoMetadataDataContract::CustomerName = CustomerName; _p->ns2__DonatPismenoMetadataDataContract::UserId1 = UserId1; _p->ns2__DonatPismenoMetadataDataContract::UserId2 = UserId2; _p->ns2__DonatPismenoMetadataDataContract::ContractDate = ContractDate; _p->ns2__DonatPismenoMetadataDataContract::OriginalCopy = OriginalCopy; _p->ns2__DonatPismenoMetadataDataContract::ElectronicSign = ElectronicSign; _p->ns2__DonatPismenoMetadataDataContract::AdditionalInfo = AdditionalInfo; _p->ns2__DonatPismenoMetadataDataContract::DocumentTypeId = DocumentTypeId; _p->ns2__DonatPismenoMetadataDataContract::AccountId = AccountId; _p->ns2__DonatPismenoMetadataDataContract::ContractId = ContractId; _p->ns2__DonatPismenoMetadataDataContract::Kp = Kp; _p->ns2__DonatPismenoMetadataDataContract::StrankaId = StrankaId; _p->ns2__DonatPismenoMetadataDataContract::Pages = Pages; _p->ns2__DonatPismenoMetadataDataContract::FileMedia = FileMedia; _p->ns2__DonatPismenoMetadataDataContract::TableSign = TableSign; _p->ns2__DonatPismenoMetadataDataContract::Pib = Pib; _p->ns2__DonatPismenoMetadataDataContract::SalesChannel = SalesChannel; _p->ns2__DonatPismenoMetadataDataContract::FileNetId = FileNetId; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DonatPismenoMetadataDataContract(struct soap *soap, ns2__DonatPismenoMetadataDataContract *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DonatPismenoMetadataDataContract(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DonatPismenoDataContract
#define SOAP_TYPE_ns2__DonatPismenoDataContract (57)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DonatPismenoDataContract(struct soap*, const char*, int, const ns2__DonatPismenoDataContract *, const char*);
SOAP_FMAC3 ns2__DonatPismenoDataContract * SOAP_FMAC4 soap_in_ns2__DonatPismenoDataContract(struct soap*, const char*, ns2__DonatPismenoDataContract *, const char*);

#ifndef soap_write_ns2__DonatPismenoDataContract
#define soap_write_ns2__DonatPismenoDataContract(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:DonatPismenoDataContract", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DonatPismenoDataContract * SOAP_FMAC4 soap_get_ns2__DonatPismenoDataContract(struct soap*, ns2__DonatPismenoDataContract *, const char*, const char*);

#ifndef soap_read_ns2__DonatPismenoDataContract
#define soap_read_ns2__DonatPismenoDataContract(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DonatPismenoDataContract(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DonatPismenoDataContract * SOAP_FMAC2 soap_instantiate_ns2__DonatPismenoDataContract(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DonatPismenoDataContract * soap_new_ns2__DonatPismenoDataContract(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DonatPismenoDataContract(soap, n, NULL, NULL, NULL); }

inline ns2__DonatPismenoDataContract * soap_new_req_ns2__DonatPismenoDataContract(struct soap *soap) { ns2__DonatPismenoDataContract *_p = soap_instantiate_ns2__DonatPismenoDataContract(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__DonatPismenoDataContract * soap_new_set_ns2__DonatPismenoDataContract(struct soap *soap, xsd__base64Binary *Pdf, ns2__DonatPismenoMetadataDataContract *MetaData, char *__item1) { ns2__DonatPismenoDataContract *_p = soap_instantiate_ns2__DonatPismenoDataContract(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DonatPismenoDataContract::Pdf = Pdf; _p->ns2__DonatPismenoDataContract::MetaData = MetaData; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DonatPismenoDataContract(struct soap *soap, ns2__DonatPismenoDataContract *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DonatPismenoDataContract(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DonatPismenaFaultContract
#define SOAP_TYPE_ns2__DonatPismenaFaultContract (56)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DonatPismenaFaultContract(struct soap*, const char*, int, const ns2__DonatPismenaFaultContract *, const char*);
SOAP_FMAC3 ns2__DonatPismenaFaultContract * SOAP_FMAC4 soap_in_ns2__DonatPismenaFaultContract(struct soap*, const char*, ns2__DonatPismenaFaultContract *, const char*);

#ifndef soap_write_ns2__DonatPismenaFaultContract
#define soap_write_ns2__DonatPismenaFaultContract(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:DonatPismenaFaultContract", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DonatPismenaFaultContract * SOAP_FMAC4 soap_get_ns2__DonatPismenaFaultContract(struct soap*, ns2__DonatPismenaFaultContract *, const char*, const char*);

#ifndef soap_read_ns2__DonatPismenaFaultContract
#define soap_read_ns2__DonatPismenaFaultContract(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DonatPismenaFaultContract(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DonatPismenaFaultContract * SOAP_FMAC2 soap_instantiate_ns2__DonatPismenaFaultContract(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DonatPismenaFaultContract * soap_new_ns2__DonatPismenaFaultContract(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DonatPismenaFaultContract(soap, n, NULL, NULL, NULL); }

inline ns2__DonatPismenaFaultContract * soap_new_req_ns2__DonatPismenaFaultContract(struct soap *soap) { ns2__DonatPismenaFaultContract *_p = soap_instantiate_ns2__DonatPismenaFaultContract(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__DonatPismenaFaultContract * soap_new_set_ns2__DonatPismenaFaultContract(struct soap *soap, int *ErrorNumber, std::string *ErrorDescription, char *__item1) { ns2__DonatPismenaFaultContract *_p = soap_instantiate_ns2__DonatPismenaFaultContract(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DonatPismenaFaultContract::ErrorNumber = ErrorNumber; _p->ns2__DonatPismenaFaultContract::ErrorDescription = ErrorDescription; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DonatPismenaFaultContract(struct soap *soap, ns2__DonatPismenaFaultContract *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DonatPismenaFaultContract(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DonatPismenoPdfDataContract
#define SOAP_TYPE_ns2__DonatPismenoPdfDataContract (55)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DonatPismenoPdfDataContract(struct soap*, const char*, int, const ns2__DonatPismenoPdfDataContract *, const char*);
SOAP_FMAC3 ns2__DonatPismenoPdfDataContract * SOAP_FMAC4 soap_in_ns2__DonatPismenoPdfDataContract(struct soap*, const char*, ns2__DonatPismenoPdfDataContract *, const char*);

#ifndef soap_write_ns2__DonatPismenoPdfDataContract
#define soap_write_ns2__DonatPismenoPdfDataContract(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:DonatPismenoPdfDataContract", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DonatPismenoPdfDataContract * SOAP_FMAC4 soap_get_ns2__DonatPismenoPdfDataContract(struct soap*, ns2__DonatPismenoPdfDataContract *, const char*, const char*);

#ifndef soap_read_ns2__DonatPismenoPdfDataContract
#define soap_read_ns2__DonatPismenoPdfDataContract(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DonatPismenoPdfDataContract(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DonatPismenoPdfDataContract * SOAP_FMAC2 soap_instantiate_ns2__DonatPismenoPdfDataContract(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DonatPismenoPdfDataContract * soap_new_ns2__DonatPismenoPdfDataContract(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DonatPismenoPdfDataContract(soap, n, NULL, NULL, NULL); }

inline ns2__DonatPismenoPdfDataContract * soap_new_req_ns2__DonatPismenoPdfDataContract(struct soap *soap) { ns2__DonatPismenoPdfDataContract *_p = soap_instantiate_ns2__DonatPismenoPdfDataContract(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__DonatPismenoPdfDataContract * soap_new_set_ns2__DonatPismenoPdfDataContract(struct soap *soap, xsd__base64Binary *Pdf, char *__item1) { ns2__DonatPismenoPdfDataContract *_p = soap_instantiate_ns2__DonatPismenoPdfDataContract(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DonatPismenoPdfDataContract::Pdf = Pdf; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DonatPismenoPdfDataContract(struct soap *soap, ns2__DonatPismenoPdfDataContract *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DonatPismenoPdfDataContract(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DonatPismenoRequestDataContract
#define SOAP_TYPE_ns2__DonatPismenoRequestDataContract (54)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DonatPismenoRequestDataContract(struct soap*, const char*, int, const ns2__DonatPismenoRequestDataContract *, const char*);
SOAP_FMAC3 ns2__DonatPismenoRequestDataContract * SOAP_FMAC4 soap_in_ns2__DonatPismenoRequestDataContract(struct soap*, const char*, ns2__DonatPismenoRequestDataContract *, const char*);

#ifndef soap_write_ns2__DonatPismenoRequestDataContract
#define soap_write_ns2__DonatPismenoRequestDataContract(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:DonatPismenoRequestDataContract", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DonatPismenoRequestDataContract * SOAP_FMAC4 soap_get_ns2__DonatPismenoRequestDataContract(struct soap*, ns2__DonatPismenoRequestDataContract *, const char*, const char*);

#ifndef soap_read_ns2__DonatPismenoRequestDataContract
#define soap_read_ns2__DonatPismenoRequestDataContract(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DonatPismenoRequestDataContract(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DonatPismenoRequestDataContract * SOAP_FMAC2 soap_instantiate_ns2__DonatPismenoRequestDataContract(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DonatPismenoRequestDataContract * soap_new_ns2__DonatPismenoRequestDataContract(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DonatPismenoRequestDataContract(soap, n, NULL, NULL, NULL); }

inline ns2__DonatPismenoRequestDataContract * soap_new_req_ns2__DonatPismenoRequestDataContract(struct soap *soap) { ns2__DonatPismenoRequestDataContract *_p = soap_instantiate_ns2__DonatPismenoRequestDataContract(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__DonatPismenoRequestDataContract * soap_new_set_ns2__DonatPismenoRequestDataContract(struct soap *soap, LONG64 *SporazumId, std::string *BrojDokumenta, char *__item1) { ns2__DonatPismenoRequestDataContract *_p = soap_instantiate_ns2__DonatPismenoRequestDataContract(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DonatPismenoRequestDataContract::SporazumId = SporazumId; _p->ns2__DonatPismenoRequestDataContract::BrojDokumenta = BrojDokumenta; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DonatPismenoRequestDataContract(struct soap *soap, ns2__DonatPismenoRequestDataContract *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DonatPismenoRequestDataContract(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__unsignedShort
#define SOAP_TYPE_xsd__unsignedShort (52)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort(struct soap*, const char*, int, const xsd__unsignedShort *, const char*);
SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_in_xsd__unsignedShort(struct soap*, const char*, xsd__unsignedShort *, const char*);

#ifndef soap_write_xsd__unsignedShort
#define soap_write_xsd__unsignedShort(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:unsignedShort", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_get_xsd__unsignedShort(struct soap*, xsd__unsignedShort *, const char*, const char*);

#ifndef soap_read_xsd__unsignedShort
#define soap_read_xsd__unsignedShort(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__unsignedShort(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__unsignedShort * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedShort * soap_new_xsd__unsignedShort(struct soap *soap, int n = -1) { return soap_instantiate_xsd__unsignedShort(soap, n, NULL, NULL, NULL); }

inline xsd__unsignedShort * soap_new_req_xsd__unsignedShort(struct soap *soap, unsigned short __item) { xsd__unsignedShort *_p = soap_instantiate_xsd__unsignedShort(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedShort::__item = __item; } return _p; }

inline xsd__unsignedShort * soap_new_set_xsd__unsignedShort(struct soap *soap, unsigned short __item, char *__item1) { xsd__unsignedShort *_p = soap_instantiate_xsd__unsignedShort(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedShort::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedShort(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__unsignedLong
#define SOAP_TYPE_xsd__unsignedLong (50)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap*, const char*, int, const xsd__unsignedLong *, const char*);
SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap*, const char*, xsd__unsignedLong *, const char*);

#ifndef soap_write_xsd__unsignedLong
#define soap_write_xsd__unsignedLong(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:unsignedLong", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap*, xsd__unsignedLong *, const char*, const char*);

#ifndef soap_read_xsd__unsignedLong
#define soap_read_xsd__unsignedLong(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__unsignedLong(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__unsignedLong * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedLong * soap_new_xsd__unsignedLong(struct soap *soap, int n = -1) { return soap_instantiate_xsd__unsignedLong(soap, n, NULL, NULL, NULL); }

inline xsd__unsignedLong * soap_new_req_xsd__unsignedLong(struct soap *soap, ULONG64 __item) { xsd__unsignedLong *_p = soap_instantiate_xsd__unsignedLong(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedLong::__item = __item; } return _p; }

inline xsd__unsignedLong * soap_new_set_xsd__unsignedLong(struct soap *soap, ULONG64 __item, char *__item1) { xsd__unsignedLong *_p = soap_instantiate_xsd__unsignedLong(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedLong::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedLong(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__unsignedInt
#define SOAP_TYPE_xsd__unsignedInt (49)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt(struct soap*, const char*, int, const xsd__unsignedInt *, const char*);
SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_in_xsd__unsignedInt(struct soap*, const char*, xsd__unsignedInt *, const char*);

#ifndef soap_write_xsd__unsignedInt
#define soap_write_xsd__unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_get_xsd__unsignedInt(struct soap*, xsd__unsignedInt *, const char*, const char*);

#ifndef soap_read_xsd__unsignedInt
#define soap_read_xsd__unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__unsignedInt * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedInt * soap_new_xsd__unsignedInt(struct soap *soap, int n = -1) { return soap_instantiate_xsd__unsignedInt(soap, n, NULL, NULL, NULL); }

inline xsd__unsignedInt * soap_new_req_xsd__unsignedInt(struct soap *soap, unsigned int __item) { xsd__unsignedInt *_p = soap_instantiate_xsd__unsignedInt(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedInt::__item = __item; } return _p; }

inline xsd__unsignedInt * soap_new_set_xsd__unsignedInt(struct soap *soap, unsigned int __item, char *__item1) { xsd__unsignedInt *_p = soap_instantiate_xsd__unsignedInt(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedInt::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedInt(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__unsignedByte_
#define SOAP_TYPE_xsd__unsignedByte_ (48)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte_(struct soap*, const char*, int, const xsd__unsignedByte_ *, const char*);
SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_in_xsd__unsignedByte_(struct soap*, const char*, xsd__unsignedByte_ *, const char*);

#ifndef soap_write_xsd__unsignedByte_
#define soap_write_xsd__unsignedByte_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_get_xsd__unsignedByte_(struct soap*, xsd__unsignedByte_ *, const char*, const char*);

#ifndef soap_read_xsd__unsignedByte_
#define soap_read_xsd__unsignedByte_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__unsignedByte_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__unsignedByte_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedByte_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedByte_ * soap_new_xsd__unsignedByte_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__unsignedByte_(soap, n, NULL, NULL, NULL); }

inline xsd__unsignedByte_ * soap_new_req_xsd__unsignedByte_(struct soap *soap, unsigned char __item) { xsd__unsignedByte_ *_p = soap_instantiate_xsd__unsignedByte_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedByte_::__item = __item; } return _p; }

inline xsd__unsignedByte_ * soap_new_set_xsd__unsignedByte_(struct soap *soap, unsigned char __item, char *__item1) { xsd__unsignedByte_ *_p = soap_instantiate_xsd__unsignedByte_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedByte_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedByte_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (47)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const xsd__string *, const char*);
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, xsd__string *, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, xsd__string *, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);

inline xsd__string * soap_new_xsd__string(struct soap *soap, int n = -1) { return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL); }

inline xsd__string * soap_new_req_xsd__string(struct soap *soap, std::string& __item) { xsd__string *_p = soap_instantiate_xsd__string(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__string::__item = __item; } return _p; }

inline xsd__string * soap_new_set_xsd__string(struct soap *soap, std::string& __item, char *__item1) { xsd__string *_p = soap_instantiate_xsd__string(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__string::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__string(struct soap *soap, xsd__string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__short
#define SOAP_TYPE_xsd__short (45)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short(struct soap*, const char*, int, const xsd__short *, const char*);
SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_in_xsd__short(struct soap*, const char*, xsd__short *, const char*);

#ifndef soap_write_xsd__short
#define soap_write_xsd__short(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:short", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_get_xsd__short(struct soap*, xsd__short *, const char*, const char*);

#ifndef soap_read_xsd__short
#define soap_read_xsd__short(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__short(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__short * SOAP_FMAC2 soap_instantiate_xsd__short(struct soap*, int, const char*, const char*, size_t*);

inline xsd__short * soap_new_xsd__short(struct soap *soap, int n = -1) { return soap_instantiate_xsd__short(soap, n, NULL, NULL, NULL); }

inline xsd__short * soap_new_req_xsd__short(struct soap *soap, short __item) { xsd__short *_p = soap_instantiate_xsd__short(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__short::__item = __item; } return _p; }

inline xsd__short * soap_new_set_xsd__short(struct soap *soap, short __item, char *__item1) { xsd__short *_p = soap_instantiate_xsd__short(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__short::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__short(struct soap *soap, xsd__short *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__short(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__long
#define SOAP_TYPE_xsd__long (43)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap*, const char*, int, const xsd__long *, const char*);
SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap*, const char*, xsd__long *, const char*);

#ifndef soap_write_xsd__long
#define soap_write_xsd__long(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap*, xsd__long *, const char*, const char*);

#ifndef soap_read_xsd__long
#define soap_read_xsd__long(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__long(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap*, int, const char*, const char*, size_t*);

inline xsd__long * soap_new_xsd__long(struct soap *soap, int n = -1) { return soap_instantiate_xsd__long(soap, n, NULL, NULL, NULL); }

inline xsd__long * soap_new_req_xsd__long(struct soap *soap, LONG64 __item) { xsd__long *_p = soap_instantiate_xsd__long(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__long::__item = __item; } return _p; }

inline xsd__long * soap_new_set_xsd__long(struct soap *soap, LONG64 __item, char *__item1) { xsd__long *_p = soap_instantiate_xsd__long(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__long::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__long(struct soap *soap, xsd__long *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__long(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (42)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const xsd__int *, const char*);
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, xsd__int *, const char*);

#ifndef soap_write_xsd__int
#define soap_write_xsd__int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, xsd__int *, const char*, const char*);

#ifndef soap_read_xsd__int
#define soap_read_xsd__int(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap*, int, const char*, const char*, size_t*);

inline xsd__int * soap_new_xsd__int(struct soap *soap, int n = -1) { return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL); }

inline xsd__int * soap_new_req_xsd__int(struct soap *soap, int __item) { xsd__int *_p = soap_instantiate_xsd__int(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__int::__item = __item; } return _p; }

inline xsd__int * soap_new_set_xsd__int(struct soap *soap, int __item, char *__item1) { xsd__int *_p = soap_instantiate_xsd__int(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__int::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__int(struct soap *soap, xsd__int *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__int(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__float
#define SOAP_TYPE_xsd__float (40)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap*, const char*, int, const xsd__float *, const char*);
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap*, const char*, xsd__float *, const char*);

#ifndef soap_write_xsd__float
#define soap_write_xsd__float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap*, xsd__float *, const char*, const char*);

#ifndef soap_read_xsd__float
#define soap_read_xsd__float(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap*, int, const char*, const char*, size_t*);

inline xsd__float * soap_new_xsd__float(struct soap *soap, int n = -1) { return soap_instantiate_xsd__float(soap, n, NULL, NULL, NULL); }

inline xsd__float * soap_new_req_xsd__float(struct soap *soap, float __item) { xsd__float *_p = soap_instantiate_xsd__float(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__float::__item = __item; } return _p; }

inline xsd__float * soap_new_set_xsd__float(struct soap *soap, float __item, char *__item1) { xsd__float *_p = soap_instantiate_xsd__float(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__float::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__float(struct soap *soap, xsd__float *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__float(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__duration_
#define SOAP_TYPE_xsd__duration_ (39)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap*, const char*, int, const xsd__duration_ *, const char*);
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap*, const char*, xsd__duration_ *, const char*);

#ifndef soap_write_xsd__duration_
#define soap_write_xsd__duration_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap*, xsd__duration_ *, const char*, const char*);

#ifndef soap_read_xsd__duration_
#define soap_read_xsd__duration_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__duration_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__duration_ * soap_new_xsd__duration_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__duration_(soap, n, NULL, NULL, NULL); }

inline xsd__duration_ * soap_new_req_xsd__duration_(struct soap *soap, LONG64 __item) { xsd__duration_ *_p = soap_instantiate_xsd__duration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__duration_::__item = __item; } return _p; }

inline xsd__duration_ * soap_new_set_xsd__duration_(struct soap *soap, LONG64 __item, char *__item1) { xsd__duration_ *_p = soap_instantiate_xsd__duration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__duration_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__duration_(struct soap *soap, xsd__duration_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__duration_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (37)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap*, const char*, int, const xsd__double *, const char*);
SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_in_xsd__double(struct soap*, const char*, xsd__double *, const char*);

#ifndef soap_write_xsd__double
#define soap_write_xsd__double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_get_xsd__double(struct soap*, xsd__double *, const char*, const char*);

#ifndef soap_read_xsd__double
#define soap_read_xsd__double(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__double * SOAP_FMAC2 soap_instantiate_xsd__double(struct soap*, int, const char*, const char*, size_t*);

inline xsd__double * soap_new_xsd__double(struct soap *soap, int n = -1) { return soap_instantiate_xsd__double(soap, n, NULL, NULL, NULL); }

inline xsd__double * soap_new_req_xsd__double(struct soap *soap, double __item) { xsd__double *_p = soap_instantiate_xsd__double(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__double::__item = __item; } return _p; }

inline xsd__double * soap_new_set_xsd__double(struct soap *soap, double __item, char *__item1) { xsd__double *_p = soap_instantiate_xsd__double(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__double::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__double(struct soap *soap, xsd__double *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__double(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__decimal_
#define SOAP_TYPE_xsd__decimal_ (36)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal_(struct soap*, const char*, int, const xsd__decimal_ *, const char*);
SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_in_xsd__decimal_(struct soap*, const char*, xsd__decimal_ *, const char*);

#ifndef soap_write_xsd__decimal_
#define soap_write_xsd__decimal_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:decimal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_get_xsd__decimal_(struct soap*, xsd__decimal_ *, const char*, const char*);

#ifndef soap_read_xsd__decimal_
#define soap_read_xsd__decimal_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__decimal_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__decimal_ * SOAP_FMAC2 soap_instantiate_xsd__decimal_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__decimal_ * soap_new_xsd__decimal_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__decimal_(soap, n, NULL, NULL, NULL); }

inline xsd__decimal_ * soap_new_req_xsd__decimal_(struct soap *soap, std::string& __item) { xsd__decimal_ *_p = soap_instantiate_xsd__decimal_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__decimal_::__item = __item; } return _p; }

inline xsd__decimal_ * soap_new_set_xsd__decimal_(struct soap *soap, std::string& __item, char *__item1) { xsd__decimal_ *_p = soap_instantiate_xsd__decimal_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__decimal_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__decimal_(struct soap *soap, xsd__decimal_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__decimal_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (35)
#endif

#define soap_default_xsd__decimal(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__decimal
#define soap_write_xsd__decimal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__decimal(soap, data),0) || soap_put_xsd__decimal(soap, data, "xsd:decimal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__decimal
#define soap_read_xsd__decimal(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__decimal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__decimal soap_instantiate_std__string


#define soap_copy_xsd__decimal soap_copy_std__string

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (33)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, const xsd__dateTime *, const char*);
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, xsd__dateTime *, const char*);

#ifndef soap_write_xsd__dateTime
#define soap_write_xsd__dateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, xsd__dateTime *, const char*, const char*);

#ifndef soap_read_xsd__dateTime
#define soap_read_xsd__dateTime(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__dateTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline xsd__dateTime * soap_new_xsd__dateTime(struct soap *soap, int n = -1) { return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL); }

inline xsd__dateTime * soap_new_req_xsd__dateTime(struct soap *soap, time_t __item) { xsd__dateTime *_p = soap_instantiate_xsd__dateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__dateTime::__item = __item; } return _p; }

inline xsd__dateTime * soap_new_set_xsd__dateTime(struct soap *soap, time_t __item, char *__item1) { xsd__dateTime *_p = soap_instantiate_xsd__dateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__dateTime::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__dateTime(struct soap *soap, xsd__dateTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__dateTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__byte_
#define SOAP_TYPE_xsd__byte_ (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte_(struct soap*, const char*, int, const xsd__byte_ *, const char*);
SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_in_xsd__byte_(struct soap*, const char*, xsd__byte_ *, const char*);

#ifndef soap_write_xsd__byte_
#define soap_write_xsd__byte_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_get_xsd__byte_(struct soap*, xsd__byte_ *, const char*, const char*);

#ifndef soap_read_xsd__byte_
#define soap_read_xsd__byte_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__byte_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__byte_ * SOAP_FMAC2 soap_instantiate_xsd__byte_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__byte_ * soap_new_xsd__byte_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__byte_(soap, n, NULL, NULL, NULL); }

inline xsd__byte_ * soap_new_req_xsd__byte_(struct soap *soap, char __item) { xsd__byte_ *_p = soap_instantiate_xsd__byte_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__byte_::__item = __item; } return _p; }

inline xsd__byte_ * soap_new_set_xsd__byte_(struct soap *soap, char __item, char *__item1) { xsd__byte_ *_p = soap_instantiate_xsd__byte_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__byte_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__byte_(struct soap *soap, xsd__byte_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__byte_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const xsd__boolean *, const char*);
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, xsd__boolean *, const char*);

#ifndef soap_write_xsd__boolean
#define soap_write_xsd__boolean(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, xsd__boolean *, const char*, const char*);

#ifndef soap_read_xsd__boolean
#define soap_read_xsd__boolean(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__boolean(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap*, int, const char*, const char*, size_t*);

inline xsd__boolean * soap_new_xsd__boolean(struct soap *soap, int n = -1) { return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, NULL); }

inline xsd__boolean * soap_new_req_xsd__boolean(struct soap *soap, bool __item) { xsd__boolean *_p = soap_instantiate_xsd__boolean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__boolean::__item = __item; } return _p; }

inline xsd__boolean * soap_new_set_xsd__boolean(struct soap *soap, bool __item, char *__item1) { xsd__boolean *_p = soap_instantiate_xsd__boolean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__boolean::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__boolean(struct soap *soap, xsd__boolean *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__boolean(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__base64Binary_
#define SOAP_TYPE_xsd__base64Binary_ (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap*, const char*, int, const xsd__base64Binary_ *, const char*);
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap*, const char*, xsd__base64Binary_ *, const char*);

#ifndef soap_write_xsd__base64Binary_
#define soap_write_xsd__base64Binary_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap*, xsd__base64Binary_ *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary_
#define soap_read_xsd__base64Binary_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__base64Binary_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary_ * soap_new_xsd__base64Binary_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__base64Binary_(soap, n, NULL, NULL, NULL); }

inline xsd__base64Binary_ * soap_new_req_xsd__base64Binary_(struct soap *soap, xsd__base64Binary& __item) { xsd__base64Binary_ *_p = soap_instantiate_xsd__base64Binary_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary_::__item = __item; } return _p; }

inline xsd__base64Binary_ * soap_new_set_xsd__base64Binary_(struct soap *soap, xsd__base64Binary& __item, char *__item1) { xsd__base64Binary_ *_p = soap_instantiate_xsd__base64Binary_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyURI_
#define SOAP_TYPE_xsd__anyURI_ (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap*, const char*, int, const xsd__anyURI_ *, const char*);
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap*, const char*, xsd__anyURI_ *, const char*);

#ifndef soap_write_xsd__anyURI_
#define soap_write_xsd__anyURI_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap*, xsd__anyURI_ *, const char*, const char*);

#ifndef soap_read_xsd__anyURI_
#define soap_read_xsd__anyURI_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyURI_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyURI_ * soap_new_xsd__anyURI_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyURI_(soap, n, NULL, NULL, NULL); }

inline xsd__anyURI_ * soap_new_req_xsd__anyURI_(struct soap *soap, std::string& __item) { xsd__anyURI_ *_p = soap_instantiate_xsd__anyURI_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyURI_::__item = __item; } return _p; }

inline xsd__anyURI_ * soap_new_set_xsd__anyURI_(struct soap *soap, std::string& __item, char *__item1) { xsd__anyURI_ *_p = soap_instantiate_xsd__anyURI_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyURI_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyURI_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (27)
#endif

#define soap_default_xsd__anyURI(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__anyURI
#define soap_write_xsd__anyURI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__anyURI(soap, data),0) || soap_put_xsd__anyURI(soap, data, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__anyURI
#define soap_read_xsd__anyURI(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyURI(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_copy_xsd__anyURI soap_copy_std__string

#ifndef SOAP_TYPE_xsd__QName_
#define SOAP_TYPE_xsd__QName_ (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName_(struct soap*, const char*, int, const xsd__QName_ *, const char*);
SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_in_xsd__QName_(struct soap*, const char*, xsd__QName_ *, const char*);

#ifndef soap_write_xsd__QName_
#define soap_write_xsd__QName_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_get_xsd__QName_(struct soap*, xsd__QName_ *, const char*, const char*);

#ifndef soap_read_xsd__QName_
#define soap_read_xsd__QName_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__QName_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__QName_ * SOAP_FMAC2 soap_instantiate_xsd__QName_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__QName_ * soap_new_xsd__QName_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__QName_(soap, n, NULL, NULL, NULL); }

inline xsd__QName_ * soap_new_req_xsd__QName_(struct soap *soap, std::string& __item) { xsd__QName_ *_p = soap_instantiate_xsd__QName_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__QName_::__item = __item; } return _p; }

inline xsd__QName_ * soap_new_set_xsd__QName_(struct soap *soap, std::string& __item, char *__item1) { xsd__QName_ *_p = soap_instantiate_xsd__QName_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__QName_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__QName_(struct soap *soap, xsd__QName_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__IDREF_
#define SOAP_TYPE_xsd__IDREF_ (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF_(struct soap*, const char*, int, const xsd__IDREF_ *, const char*);
SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_in_xsd__IDREF_(struct soap*, const char*, xsd__IDREF_ *, const char*);

#ifndef soap_write_xsd__IDREF_
#define soap_write_xsd__IDREF_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:IDREF", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_get_xsd__IDREF_(struct soap*, xsd__IDREF_ *, const char*, const char*);

#ifndef soap_read_xsd__IDREF_
#define soap_read_xsd__IDREF_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__IDREF_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__IDREF_ * SOAP_FMAC2 soap_instantiate_xsd__IDREF_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__IDREF_ * soap_new_xsd__IDREF_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__IDREF_(soap, n, NULL, NULL, NULL); }

inline xsd__IDREF_ * soap_new_req_xsd__IDREF_(struct soap *soap, std::string& __item) { xsd__IDREF_ *_p = soap_instantiate_xsd__IDREF_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__IDREF_::__item = __item; } return _p; }

inline xsd__IDREF_ * soap_new_set_xsd__IDREF_(struct soap *soap, std::string& __item, char *__item1) { xsd__IDREF_ *_p = soap_instantiate_xsd__IDREF_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__IDREF_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__IDREF_(struct soap *soap, xsd__IDREF_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__IDREF_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__IDREF
#define SOAP_TYPE_xsd__IDREF (24)
#endif

#define soap_default_xsd__IDREF(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__IDREF(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__IDREF(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__IDREF(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__IDREF
#define soap_write_xsd__IDREF(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__IDREF(soap, data),0) || soap_put_xsd__IDREF(soap, data, "xsd:IDREF", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__IDREF(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__IDREF
#define soap_read_xsd__IDREF(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__IDREF(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__IDREF soap_instantiate_std__string


#define soap_copy_xsd__IDREF soap_copy_std__string

#ifndef SOAP_TYPE_xsd__ID_
#define SOAP_TYPE_xsd__ID_ (23)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID_(struct soap*, const char*, int, const xsd__ID_ *, const char*);
SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_in_xsd__ID_(struct soap*, const char*, xsd__ID_ *, const char*);

#ifndef soap_write_xsd__ID_
#define soap_write_xsd__ID_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:ID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_get_xsd__ID_(struct soap*, xsd__ID_ *, const char*, const char*);

#ifndef soap_read_xsd__ID_
#define soap_read_xsd__ID_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__ID_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__ID_ * SOAP_FMAC2 soap_instantiate_xsd__ID_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__ID_ * soap_new_xsd__ID_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__ID_(soap, n, NULL, NULL, NULL); }

inline xsd__ID_ * soap_new_req_xsd__ID_(struct soap *soap, std::string& __item) { xsd__ID_ *_p = soap_instantiate_xsd__ID_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__ID_::__item = __item; } return _p; }

inline xsd__ID_ * soap_new_set_xsd__ID_(struct soap *soap, std::string& __item, char *__item1) { xsd__ID_ *_p = soap_instantiate_xsd__ID_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__ID_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__ID_(struct soap *soap, xsd__ID_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__ID_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__ID
#define SOAP_TYPE_xsd__ID (22)
#endif

#define soap_default_xsd__ID(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__ID(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__ID
#define soap_write_xsd__ID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__ID(soap, data),0) || soap_put_xsd__ID(soap, data, "xsd:ID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__ID(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__ID
#define soap_read_xsd__ID(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__ID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__ID soap_instantiate_std__string


#define soap_copy_xsd__ID soap_copy_std__string

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (12)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);

#ifndef soap_write_xsd__base64Binary
#define soap_write_xsd__base64Binary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary
#define soap_read_xsd__base64Binary(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1) { return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL); }

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(struct soap *soap) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(struct soap *soap, unsigned char *__ptr, int __size, char *id, char *type, char *options) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary::__ptr = __ptr; _p->xsd__base64Binary::__size = __size; _p->xsd__base64Binary::id = id; _p->xsd__base64Binary::type = type; _p->xsd__base64Binary::options = options; } return _p; }

inline void soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__QName(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__QName
#define soap_write_xsd__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__QName(soap, data),0) || soap_put_xsd__QName(soap, data, "xsd:QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__QName
#define soap_read_xsd__QName(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_xsd__QName(struct soap *soap, int n = -1) { return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_xsd__QName(struct soap *soap) { std::string *_p = soap_instantiate_xsd__QName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__QName(soap, _p); } return _p; }

inline std::string * soap_new_set_xsd__QName(struct soap *soap) { std::string *_p = soap_instantiate_xsd__QName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__QName(soap, _p); } return _p; }

inline void soap_delete_xsd__QName(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);

#ifndef soap_write_xsd__anyType
#define soap_write_xsd__anyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:anyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

#ifndef soap_read_xsd__anyType
#define soap_read_xsd__anyType(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL); }

inline xsd__anyType * soap_new_req_xsd__anyType(struct soap *soap) { xsd__anyType *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__anyType * soap_new_set_xsd__anyType(struct soap *soap, char *__item) { xsd__anyType *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyType::__item = __item; } return _p; }

inline void soap_delete_xsd__anyType(struct soap *soap, xsd__anyType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (118)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___ns1__GetPrigovor
#define SOAP_TYPE___ns1__GetPrigovor (114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPrigovor(struct soap*, struct __ns1__GetPrigovor *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPrigovor(struct soap*, const struct __ns1__GetPrigovor *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPrigovor(struct soap*, const char*, int, const struct __ns1__GetPrigovor *, const char*);
SOAP_FMAC3 struct __ns1__GetPrigovor * SOAP_FMAC4 soap_in___ns1__GetPrigovor(struct soap*, const char*, struct __ns1__GetPrigovor *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPrigovor(struct soap*, const struct __ns1__GetPrigovor *, const char*, const char*);

#ifndef soap_write___ns1__GetPrigovor
#define soap_write___ns1__GetPrigovor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetPrigovor(soap, data),0) || soap_put___ns1__GetPrigovor(soap, data, "-ns1:GetPrigovor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetPrigovor * SOAP_FMAC4 soap_get___ns1__GetPrigovor(struct soap*, struct __ns1__GetPrigovor *, const char*, const char*);

#ifndef soap_read___ns1__GetPrigovor
#define soap_read___ns1__GetPrigovor(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetPrigovor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetPrigovor * SOAP_FMAC2 soap_instantiate___ns1__GetPrigovor(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPrigovor * soap_new___ns1__GetPrigovor(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetPrigovor(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetPrigovor * soap_new_req___ns1__GetPrigovor(struct soap *soap, LONG64 ns1__PrigovorId) { struct __ns1__GetPrigovor *_p = soap_instantiate___ns1__GetPrigovor(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetPrigovor(soap, _p); _p->ns1__PrigovorId = ns1__PrigovorId; } return _p; }

inline struct __ns1__GetPrigovor * soap_new_set___ns1__GetPrigovor(struct soap *soap, LONG64 ns1__PrigovorId) { struct __ns1__GetPrigovor *_p = soap_instantiate___ns1__GetPrigovor(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetPrigovor(soap, _p); _p->ns1__PrigovorId = ns1__PrigovorId; } return _p; }

inline void soap_delete___ns1__GetPrigovor(struct soap *soap, struct __ns1__GetPrigovor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetPrigovor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetPrigovorPdf
#define SOAP_TYPE___ns1__GetPrigovorPdf (112)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPrigovorPdf(struct soap*, struct __ns1__GetPrigovorPdf *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPrigovorPdf(struct soap*, const struct __ns1__GetPrigovorPdf *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPrigovorPdf(struct soap*, const char*, int, const struct __ns1__GetPrigovorPdf *, const char*);
SOAP_FMAC3 struct __ns1__GetPrigovorPdf * SOAP_FMAC4 soap_in___ns1__GetPrigovorPdf(struct soap*, const char*, struct __ns1__GetPrigovorPdf *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPrigovorPdf(struct soap*, const struct __ns1__GetPrigovorPdf *, const char*, const char*);

#ifndef soap_write___ns1__GetPrigovorPdf
#define soap_write___ns1__GetPrigovorPdf(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetPrigovorPdf(soap, data),0) || soap_put___ns1__GetPrigovorPdf(soap, data, "-ns1:GetPrigovorPdf", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetPrigovorPdf * SOAP_FMAC4 soap_get___ns1__GetPrigovorPdf(struct soap*, struct __ns1__GetPrigovorPdf *, const char*, const char*);

#ifndef soap_read___ns1__GetPrigovorPdf
#define soap_read___ns1__GetPrigovorPdf(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetPrigovorPdf(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetPrigovorPdf * SOAP_FMAC2 soap_instantiate___ns1__GetPrigovorPdf(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPrigovorPdf * soap_new___ns1__GetPrigovorPdf(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetPrigovorPdf(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetPrigovorPdf * soap_new_req___ns1__GetPrigovorPdf(struct soap *soap, LONG64 ns1__PrigovorId) { struct __ns1__GetPrigovorPdf *_p = soap_instantiate___ns1__GetPrigovorPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetPrigovorPdf(soap, _p); _p->ns1__PrigovorId = ns1__PrigovorId; } return _p; }

inline struct __ns1__GetPrigovorPdf * soap_new_set___ns1__GetPrigovorPdf(struct soap *soap, LONG64 ns1__PrigovorId) { struct __ns1__GetPrigovorPdf *_p = soap_instantiate___ns1__GetPrigovorPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetPrigovorPdf(soap, _p); _p->ns1__PrigovorId = ns1__PrigovorId; } return _p; }

inline void soap_delete___ns1__GetPrigovorPdf(struct soap *soap, struct __ns1__GetPrigovorPdf *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetPrigovorPdf(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetZlonamjerni
#define SOAP_TYPE___ns1__GetZlonamjerni (110)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetZlonamjerni(struct soap*, struct __ns1__GetZlonamjerni *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetZlonamjerni(struct soap*, const struct __ns1__GetZlonamjerni *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetZlonamjerni(struct soap*, const char*, int, const struct __ns1__GetZlonamjerni *, const char*);
SOAP_FMAC3 struct __ns1__GetZlonamjerni * SOAP_FMAC4 soap_in___ns1__GetZlonamjerni(struct soap*, const char*, struct __ns1__GetZlonamjerni *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetZlonamjerni(struct soap*, const struct __ns1__GetZlonamjerni *, const char*, const char*);

#ifndef soap_write___ns1__GetZlonamjerni
#define soap_write___ns1__GetZlonamjerni(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetZlonamjerni(soap, data),0) || soap_put___ns1__GetZlonamjerni(soap, data, "-ns1:GetZlonamjerni", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetZlonamjerni * SOAP_FMAC4 soap_get___ns1__GetZlonamjerni(struct soap*, struct __ns1__GetZlonamjerni *, const char*, const char*);

#ifndef soap_read___ns1__GetZlonamjerni
#define soap_read___ns1__GetZlonamjerni(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetZlonamjerni(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetZlonamjerni * SOAP_FMAC2 soap_instantiate___ns1__GetZlonamjerni(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetZlonamjerni * soap_new___ns1__GetZlonamjerni(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetZlonamjerni(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetZlonamjerni * soap_new_req___ns1__GetZlonamjerni(struct soap *soap, LONG64 ns1__ZlonamjerniId) { struct __ns1__GetZlonamjerni *_p = soap_instantiate___ns1__GetZlonamjerni(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetZlonamjerni(soap, _p); _p->ns1__ZlonamjerniId = ns1__ZlonamjerniId; } return _p; }

inline struct __ns1__GetZlonamjerni * soap_new_set___ns1__GetZlonamjerni(struct soap *soap, LONG64 ns1__ZlonamjerniId) { struct __ns1__GetZlonamjerni *_p = soap_instantiate___ns1__GetZlonamjerni(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetZlonamjerni(soap, _p); _p->ns1__ZlonamjerniId = ns1__ZlonamjerniId; } return _p; }

inline void soap_delete___ns1__GetZlonamjerni(struct soap *soap, struct __ns1__GetZlonamjerni *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetZlonamjerni(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetZlonamjerniPdf
#define SOAP_TYPE___ns1__GetZlonamjerniPdf (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetZlonamjerniPdf(struct soap*, struct __ns1__GetZlonamjerniPdf *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetZlonamjerniPdf(struct soap*, const struct __ns1__GetZlonamjerniPdf *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetZlonamjerniPdf(struct soap*, const char*, int, const struct __ns1__GetZlonamjerniPdf *, const char*);
SOAP_FMAC3 struct __ns1__GetZlonamjerniPdf * SOAP_FMAC4 soap_in___ns1__GetZlonamjerniPdf(struct soap*, const char*, struct __ns1__GetZlonamjerniPdf *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetZlonamjerniPdf(struct soap*, const struct __ns1__GetZlonamjerniPdf *, const char*, const char*);

#ifndef soap_write___ns1__GetZlonamjerniPdf
#define soap_write___ns1__GetZlonamjerniPdf(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetZlonamjerniPdf(soap, data),0) || soap_put___ns1__GetZlonamjerniPdf(soap, data, "-ns1:GetZlonamjerniPdf", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetZlonamjerniPdf * SOAP_FMAC4 soap_get___ns1__GetZlonamjerniPdf(struct soap*, struct __ns1__GetZlonamjerniPdf *, const char*, const char*);

#ifndef soap_read___ns1__GetZlonamjerniPdf
#define soap_read___ns1__GetZlonamjerniPdf(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetZlonamjerniPdf(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetZlonamjerniPdf * SOAP_FMAC2 soap_instantiate___ns1__GetZlonamjerniPdf(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetZlonamjerniPdf * soap_new___ns1__GetZlonamjerniPdf(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetZlonamjerniPdf(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetZlonamjerniPdf * soap_new_req___ns1__GetZlonamjerniPdf(struct soap *soap, LONG64 ns1__ZlonamjerniId) { struct __ns1__GetZlonamjerniPdf *_p = soap_instantiate___ns1__GetZlonamjerniPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetZlonamjerniPdf(soap, _p); _p->ns1__ZlonamjerniId = ns1__ZlonamjerniId; } return _p; }

inline struct __ns1__GetZlonamjerniPdf * soap_new_set___ns1__GetZlonamjerniPdf(struct soap *soap, LONG64 ns1__ZlonamjerniId) { struct __ns1__GetZlonamjerniPdf *_p = soap_instantiate___ns1__GetZlonamjerniPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetZlonamjerniPdf(soap, _p); _p->ns1__ZlonamjerniId = ns1__ZlonamjerniId; } return _p; }

inline void soap_delete___ns1__GetZlonamjerniPdf(struct soap *soap, struct __ns1__GetZlonamjerniPdf *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetZlonamjerniPdf(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetSplitContract
#define SOAP_TYPE___ns1__GetSplitContract (106)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSplitContract(struct soap*, struct __ns1__GetSplitContract *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSplitContract(struct soap*, const struct __ns1__GetSplitContract *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSplitContract(struct soap*, const char*, int, const struct __ns1__GetSplitContract *, const char*);
SOAP_FMAC3 struct __ns1__GetSplitContract * SOAP_FMAC4 soap_in___ns1__GetSplitContract(struct soap*, const char*, struct __ns1__GetSplitContract *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSplitContract(struct soap*, const struct __ns1__GetSplitContract *, const char*, const char*);

#ifndef soap_write___ns1__GetSplitContract
#define soap_write___ns1__GetSplitContract(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetSplitContract(soap, data),0) || soap_put___ns1__GetSplitContract(soap, data, "-ns1:GetSplitContract", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetSplitContract * SOAP_FMAC4 soap_get___ns1__GetSplitContract(struct soap*, struct __ns1__GetSplitContract *, const char*, const char*);

#ifndef soap_read___ns1__GetSplitContract
#define soap_read___ns1__GetSplitContract(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetSplitContract(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetSplitContract * SOAP_FMAC2 soap_instantiate___ns1__GetSplitContract(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetSplitContract * soap_new___ns1__GetSplitContract(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetSplitContract(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetSplitContract * soap_new_req___ns1__GetSplitContract(struct soap *soap) { struct __ns1__GetSplitContract *_p = soap_instantiate___ns1__GetSplitContract(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetSplitContract(soap, _p); } return _p; }

inline struct __ns1__GetSplitContract * soap_new_set___ns1__GetSplitContract(struct soap *soap, ns2__DonatPismenoRequestDataContract *ns1__DonatSplitContractReq) { struct __ns1__GetSplitContract *_p = soap_instantiate___ns1__GetSplitContract(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetSplitContract(soap, _p); _p->ns1__DonatSplitContractReq = ns1__DonatSplitContractReq; } return _p; }

inline void soap_delete___ns1__GetSplitContract(struct soap *soap, struct __ns1__GetSplitContract *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetSplitContract(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetSplitContractPdf
#define SOAP_TYPE___ns1__GetSplitContractPdf (104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSplitContractPdf(struct soap*, struct __ns1__GetSplitContractPdf *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSplitContractPdf(struct soap*, const struct __ns1__GetSplitContractPdf *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSplitContractPdf(struct soap*, const char*, int, const struct __ns1__GetSplitContractPdf *, const char*);
SOAP_FMAC3 struct __ns1__GetSplitContractPdf * SOAP_FMAC4 soap_in___ns1__GetSplitContractPdf(struct soap*, const char*, struct __ns1__GetSplitContractPdf *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSplitContractPdf(struct soap*, const struct __ns1__GetSplitContractPdf *, const char*, const char*);

#ifndef soap_write___ns1__GetSplitContractPdf
#define soap_write___ns1__GetSplitContractPdf(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetSplitContractPdf(soap, data),0) || soap_put___ns1__GetSplitContractPdf(soap, data, "-ns1:GetSplitContractPdf", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetSplitContractPdf * SOAP_FMAC4 soap_get___ns1__GetSplitContractPdf(struct soap*, struct __ns1__GetSplitContractPdf *, const char*, const char*);

#ifndef soap_read___ns1__GetSplitContractPdf
#define soap_read___ns1__GetSplitContractPdf(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetSplitContractPdf(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetSplitContractPdf * SOAP_FMAC2 soap_instantiate___ns1__GetSplitContractPdf(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetSplitContractPdf * soap_new___ns1__GetSplitContractPdf(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetSplitContractPdf(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetSplitContractPdf * soap_new_req___ns1__GetSplitContractPdf(struct soap *soap) { struct __ns1__GetSplitContractPdf *_p = soap_instantiate___ns1__GetSplitContractPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetSplitContractPdf(soap, _p); } return _p; }

inline struct __ns1__GetSplitContractPdf * soap_new_set___ns1__GetSplitContractPdf(struct soap *soap, ns2__DonatPismenoRequestDataContract *ns1__DonatSplitContractReq) { struct __ns1__GetSplitContractPdf *_p = soap_instantiate___ns1__GetSplitContractPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetSplitContractPdf(soap, _p); _p->ns1__DonatSplitContractReq = ns1__DonatSplitContractReq; } return _p; }

inline void soap_delete___ns1__GetSplitContractPdf(struct soap *soap, struct __ns1__GetSplitContractPdf *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetSplitContractPdf(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetTrajniNalog
#define SOAP_TYPE___ns1__GetTrajniNalog (102)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTrajniNalog(struct soap*, struct __ns1__GetTrajniNalog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTrajniNalog(struct soap*, const struct __ns1__GetTrajniNalog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTrajniNalog(struct soap*, const char*, int, const struct __ns1__GetTrajniNalog *, const char*);
SOAP_FMAC3 struct __ns1__GetTrajniNalog * SOAP_FMAC4 soap_in___ns1__GetTrajniNalog(struct soap*, const char*, struct __ns1__GetTrajniNalog *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTrajniNalog(struct soap*, const struct __ns1__GetTrajniNalog *, const char*, const char*);

#ifndef soap_write___ns1__GetTrajniNalog
#define soap_write___ns1__GetTrajniNalog(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetTrajniNalog(soap, data),0) || soap_put___ns1__GetTrajniNalog(soap, data, "-ns1:GetTrajniNalog", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetTrajniNalog * SOAP_FMAC4 soap_get___ns1__GetTrajniNalog(struct soap*, struct __ns1__GetTrajniNalog *, const char*, const char*);

#ifndef soap_read___ns1__GetTrajniNalog
#define soap_read___ns1__GetTrajniNalog(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetTrajniNalog(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetTrajniNalog * SOAP_FMAC2 soap_instantiate___ns1__GetTrajniNalog(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetTrajniNalog * soap_new___ns1__GetTrajniNalog(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetTrajniNalog(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetTrajniNalog * soap_new_req___ns1__GetTrajniNalog(struct soap *soap) { struct __ns1__GetTrajniNalog *_p = soap_instantiate___ns1__GetTrajniNalog(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetTrajniNalog(soap, _p); } return _p; }

inline struct __ns1__GetTrajniNalog * soap_new_set___ns1__GetTrajniNalog(struct soap *soap, ns2__DonatPismenoRequestDataContract *ns1__DonatTrajniNalogReq) { struct __ns1__GetTrajniNalog *_p = soap_instantiate___ns1__GetTrajniNalog(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetTrajniNalog(soap, _p); _p->ns1__DonatTrajniNalogReq = ns1__DonatTrajniNalogReq; } return _p; }

inline void soap_delete___ns1__GetTrajniNalog(struct soap *soap, struct __ns1__GetTrajniNalog *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetTrajniNalog(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetTrajniNalogPdf
#define SOAP_TYPE___ns1__GetTrajniNalogPdf (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTrajniNalogPdf(struct soap*, struct __ns1__GetTrajniNalogPdf *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTrajniNalogPdf(struct soap*, const struct __ns1__GetTrajniNalogPdf *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTrajniNalogPdf(struct soap*, const char*, int, const struct __ns1__GetTrajniNalogPdf *, const char*);
SOAP_FMAC3 struct __ns1__GetTrajniNalogPdf * SOAP_FMAC4 soap_in___ns1__GetTrajniNalogPdf(struct soap*, const char*, struct __ns1__GetTrajniNalogPdf *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTrajniNalogPdf(struct soap*, const struct __ns1__GetTrajniNalogPdf *, const char*, const char*);

#ifndef soap_write___ns1__GetTrajniNalogPdf
#define soap_write___ns1__GetTrajniNalogPdf(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetTrajniNalogPdf(soap, data),0) || soap_put___ns1__GetTrajniNalogPdf(soap, data, "-ns1:GetTrajniNalogPdf", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetTrajniNalogPdf * SOAP_FMAC4 soap_get___ns1__GetTrajniNalogPdf(struct soap*, struct __ns1__GetTrajniNalogPdf *, const char*, const char*);

#ifndef soap_read___ns1__GetTrajniNalogPdf
#define soap_read___ns1__GetTrajniNalogPdf(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetTrajniNalogPdf(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetTrajniNalogPdf * SOAP_FMAC2 soap_instantiate___ns1__GetTrajniNalogPdf(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetTrajniNalogPdf * soap_new___ns1__GetTrajniNalogPdf(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetTrajniNalogPdf(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetTrajniNalogPdf * soap_new_req___ns1__GetTrajniNalogPdf(struct soap *soap) { struct __ns1__GetTrajniNalogPdf *_p = soap_instantiate___ns1__GetTrajniNalogPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetTrajniNalogPdf(soap, _p); } return _p; }

inline struct __ns1__GetTrajniNalogPdf * soap_new_set___ns1__GetTrajniNalogPdf(struct soap *soap, ns2__DonatPismenoRequestDataContract *ns1__DonatTrajniNalogReq) { struct __ns1__GetTrajniNalogPdf *_p = soap_instantiate___ns1__GetTrajniNalogPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetTrajniNalogPdf(soap, _p); _p->ns1__DonatTrajniNalogReq = ns1__DonatTrajniNalogReq; } return _p; }

inline void soap_delete___ns1__GetTrajniNalogPdf(struct soap *soap, struct __ns1__GetTrajniNalogPdf *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetTrajniNalogPdf(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetUgovornaObveza
#define SOAP_TYPE___ns1__GetUgovornaObveza (98)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetUgovornaObveza(struct soap*, struct __ns1__GetUgovornaObveza *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetUgovornaObveza(struct soap*, const struct __ns1__GetUgovornaObveza *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetUgovornaObveza(struct soap*, const char*, int, const struct __ns1__GetUgovornaObveza *, const char*);
SOAP_FMAC3 struct __ns1__GetUgovornaObveza * SOAP_FMAC4 soap_in___ns1__GetUgovornaObveza(struct soap*, const char*, struct __ns1__GetUgovornaObveza *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetUgovornaObveza(struct soap*, const struct __ns1__GetUgovornaObveza *, const char*, const char*);

#ifndef soap_write___ns1__GetUgovornaObveza
#define soap_write___ns1__GetUgovornaObveza(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetUgovornaObveza(soap, data),0) || soap_put___ns1__GetUgovornaObveza(soap, data, "-ns1:GetUgovornaObveza", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetUgovornaObveza * SOAP_FMAC4 soap_get___ns1__GetUgovornaObveza(struct soap*, struct __ns1__GetUgovornaObveza *, const char*, const char*);

#ifndef soap_read___ns1__GetUgovornaObveza
#define soap_read___ns1__GetUgovornaObveza(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetUgovornaObveza(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetUgovornaObveza * SOAP_FMAC2 soap_instantiate___ns1__GetUgovornaObveza(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetUgovornaObveza * soap_new___ns1__GetUgovornaObveza(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetUgovornaObveza(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetUgovornaObveza * soap_new_req___ns1__GetUgovornaObveza(struct soap *soap, LONG64 ns1__GrupaImovineId, LONG64 ns1__KupacId) { struct __ns1__GetUgovornaObveza *_p = soap_instantiate___ns1__GetUgovornaObveza(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetUgovornaObveza(soap, _p); _p->ns1__GrupaImovineId = ns1__GrupaImovineId; _p->ns1__KupacId = ns1__KupacId; } return _p; }

inline struct __ns1__GetUgovornaObveza * soap_new_set___ns1__GetUgovornaObveza(struct soap *soap, LONG64 ns1__GrupaImovineId, LONG64 ns1__KupacId) { struct __ns1__GetUgovornaObveza *_p = soap_instantiate___ns1__GetUgovornaObveza(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetUgovornaObveza(soap, _p); _p->ns1__GrupaImovineId = ns1__GrupaImovineId; _p->ns1__KupacId = ns1__KupacId; } return _p; }

inline void soap_delete___ns1__GetUgovornaObveza(struct soap *soap, struct __ns1__GetUgovornaObveza *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetUgovornaObveza(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetUgovornaObvezaPdf
#define SOAP_TYPE___ns1__GetUgovornaObvezaPdf (96)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetUgovornaObvezaPdf(struct soap*, struct __ns1__GetUgovornaObvezaPdf *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetUgovornaObvezaPdf(struct soap*, const struct __ns1__GetUgovornaObvezaPdf *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetUgovornaObvezaPdf(struct soap*, const char*, int, const struct __ns1__GetUgovornaObvezaPdf *, const char*);
SOAP_FMAC3 struct __ns1__GetUgovornaObvezaPdf * SOAP_FMAC4 soap_in___ns1__GetUgovornaObvezaPdf(struct soap*, const char*, struct __ns1__GetUgovornaObvezaPdf *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetUgovornaObvezaPdf(struct soap*, const struct __ns1__GetUgovornaObvezaPdf *, const char*, const char*);

#ifndef soap_write___ns1__GetUgovornaObvezaPdf
#define soap_write___ns1__GetUgovornaObvezaPdf(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetUgovornaObvezaPdf(soap, data),0) || soap_put___ns1__GetUgovornaObvezaPdf(soap, data, "-ns1:GetUgovornaObvezaPdf", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetUgovornaObvezaPdf * SOAP_FMAC4 soap_get___ns1__GetUgovornaObvezaPdf(struct soap*, struct __ns1__GetUgovornaObvezaPdf *, const char*, const char*);

#ifndef soap_read___ns1__GetUgovornaObvezaPdf
#define soap_read___ns1__GetUgovornaObvezaPdf(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetUgovornaObvezaPdf(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetUgovornaObvezaPdf * SOAP_FMAC2 soap_instantiate___ns1__GetUgovornaObvezaPdf(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetUgovornaObvezaPdf * soap_new___ns1__GetUgovornaObvezaPdf(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetUgovornaObvezaPdf(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetUgovornaObvezaPdf * soap_new_req___ns1__GetUgovornaObvezaPdf(struct soap *soap, LONG64 ns1__GrupaImovineId, LONG64 ns1__KupacId) { struct __ns1__GetUgovornaObvezaPdf *_p = soap_instantiate___ns1__GetUgovornaObvezaPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetUgovornaObvezaPdf(soap, _p); _p->ns1__GrupaImovineId = ns1__GrupaImovineId; _p->ns1__KupacId = ns1__KupacId; } return _p; }

inline struct __ns1__GetUgovornaObvezaPdf * soap_new_set___ns1__GetUgovornaObvezaPdf(struct soap *soap, LONG64 ns1__GrupaImovineId, LONG64 ns1__KupacId) { struct __ns1__GetUgovornaObvezaPdf *_p = soap_instantiate___ns1__GetUgovornaObvezaPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetUgovornaObvezaPdf(soap, _p); _p->ns1__GrupaImovineId = ns1__GrupaImovineId; _p->ns1__KupacId = ns1__KupacId; } return _p; }

inline void soap_delete___ns1__GetUgovornaObvezaPdf(struct soap *soap, struct __ns1__GetUgovornaObvezaPdf *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetUgovornaObvezaPdf(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetOdbijenica
#define SOAP_TYPE___ns1__GetOdbijenica (94)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetOdbijenica(struct soap*, struct __ns1__GetOdbijenica *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetOdbijenica(struct soap*, const struct __ns1__GetOdbijenica *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetOdbijenica(struct soap*, const char*, int, const struct __ns1__GetOdbijenica *, const char*);
SOAP_FMAC3 struct __ns1__GetOdbijenica * SOAP_FMAC4 soap_in___ns1__GetOdbijenica(struct soap*, const char*, struct __ns1__GetOdbijenica *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetOdbijenica(struct soap*, const struct __ns1__GetOdbijenica *, const char*, const char*);

#ifndef soap_write___ns1__GetOdbijenica
#define soap_write___ns1__GetOdbijenica(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetOdbijenica(soap, data),0) || soap_put___ns1__GetOdbijenica(soap, data, "-ns1:GetOdbijenica", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetOdbijenica * SOAP_FMAC4 soap_get___ns1__GetOdbijenica(struct soap*, struct __ns1__GetOdbijenica *, const char*, const char*);

#ifndef soap_read___ns1__GetOdbijenica
#define soap_read___ns1__GetOdbijenica(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetOdbijenica(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetOdbijenica * SOAP_FMAC2 soap_instantiate___ns1__GetOdbijenica(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetOdbijenica * soap_new___ns1__GetOdbijenica(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetOdbijenica(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetOdbijenica * soap_new_req___ns1__GetOdbijenica(struct soap *soap) { struct __ns1__GetOdbijenica *_p = soap_instantiate___ns1__GetOdbijenica(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOdbijenica(soap, _p); } return _p; }

inline struct __ns1__GetOdbijenica * soap_new_set___ns1__GetOdbijenica(struct soap *soap, ns2__DonatPismenoRequestDataContract *ns1__DonatOdbijenicaReq) { struct __ns1__GetOdbijenica *_p = soap_instantiate___ns1__GetOdbijenica(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOdbijenica(soap, _p); _p->ns1__DonatOdbijenicaReq = ns1__DonatOdbijenicaReq; } return _p; }

inline void soap_delete___ns1__GetOdbijenica(struct soap *soap, struct __ns1__GetOdbijenica *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetOdbijenica(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetOdbijenicaPdf
#define SOAP_TYPE___ns1__GetOdbijenicaPdf (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetOdbijenicaPdf(struct soap*, struct __ns1__GetOdbijenicaPdf *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetOdbijenicaPdf(struct soap*, const struct __ns1__GetOdbijenicaPdf *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetOdbijenicaPdf(struct soap*, const char*, int, const struct __ns1__GetOdbijenicaPdf *, const char*);
SOAP_FMAC3 struct __ns1__GetOdbijenicaPdf * SOAP_FMAC4 soap_in___ns1__GetOdbijenicaPdf(struct soap*, const char*, struct __ns1__GetOdbijenicaPdf *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetOdbijenicaPdf(struct soap*, const struct __ns1__GetOdbijenicaPdf *, const char*, const char*);

#ifndef soap_write___ns1__GetOdbijenicaPdf
#define soap_write___ns1__GetOdbijenicaPdf(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetOdbijenicaPdf(soap, data),0) || soap_put___ns1__GetOdbijenicaPdf(soap, data, "-ns1:GetOdbijenicaPdf", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetOdbijenicaPdf * SOAP_FMAC4 soap_get___ns1__GetOdbijenicaPdf(struct soap*, struct __ns1__GetOdbijenicaPdf *, const char*, const char*);

#ifndef soap_read___ns1__GetOdbijenicaPdf
#define soap_read___ns1__GetOdbijenicaPdf(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetOdbijenicaPdf(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetOdbijenicaPdf * SOAP_FMAC2 soap_instantiate___ns1__GetOdbijenicaPdf(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetOdbijenicaPdf * soap_new___ns1__GetOdbijenicaPdf(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetOdbijenicaPdf(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetOdbijenicaPdf * soap_new_req___ns1__GetOdbijenicaPdf(struct soap *soap) { struct __ns1__GetOdbijenicaPdf *_p = soap_instantiate___ns1__GetOdbijenicaPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOdbijenicaPdf(soap, _p); } return _p; }

inline struct __ns1__GetOdbijenicaPdf * soap_new_set___ns1__GetOdbijenicaPdf(struct soap *soap, ns2__DonatPismenoRequestDataContract *ns1__DonatOdbijenicaReq) { struct __ns1__GetOdbijenicaPdf *_p = soap_instantiate___ns1__GetOdbijenicaPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOdbijenicaPdf(soap, _p); _p->ns1__DonatOdbijenicaReq = ns1__DonatOdbijenicaReq; } return _p; }

inline void soap_delete___ns1__GetOdbijenicaPdf(struct soap *soap, struct __ns1__GetOdbijenicaPdf *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetOdbijenicaPdf(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetPismo
#define SOAP_TYPE___ns1__GetPismo (90)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPismo(struct soap*, struct __ns1__GetPismo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPismo(struct soap*, const struct __ns1__GetPismo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPismo(struct soap*, const char*, int, const struct __ns1__GetPismo *, const char*);
SOAP_FMAC3 struct __ns1__GetPismo * SOAP_FMAC4 soap_in___ns1__GetPismo(struct soap*, const char*, struct __ns1__GetPismo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPismo(struct soap*, const struct __ns1__GetPismo *, const char*, const char*);

#ifndef soap_write___ns1__GetPismo
#define soap_write___ns1__GetPismo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetPismo(soap, data),0) || soap_put___ns1__GetPismo(soap, data, "-ns1:GetPismo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetPismo * SOAP_FMAC4 soap_get___ns1__GetPismo(struct soap*, struct __ns1__GetPismo *, const char*, const char*);

#ifndef soap_read___ns1__GetPismo
#define soap_read___ns1__GetPismo(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetPismo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetPismo * SOAP_FMAC2 soap_instantiate___ns1__GetPismo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPismo * soap_new___ns1__GetPismo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetPismo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetPismo * soap_new_req___ns1__GetPismo(struct soap *soap) { struct __ns1__GetPismo *_p = soap_instantiate___ns1__GetPismo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetPismo(soap, _p); } return _p; }

inline struct __ns1__GetPismo * soap_new_set___ns1__GetPismo(struct soap *soap, ns2__DonatPismenoRequestDataContract *ns1__DonatPismoReq) { struct __ns1__GetPismo *_p = soap_instantiate___ns1__GetPismo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetPismo(soap, _p); _p->ns1__DonatPismoReq = ns1__DonatPismoReq; } return _p; }

inline void soap_delete___ns1__GetPismo(struct soap *soap, struct __ns1__GetPismo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetPismo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetPismoPdf
#define SOAP_TYPE___ns1__GetPismoPdf (88)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPismoPdf(struct soap*, struct __ns1__GetPismoPdf *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPismoPdf(struct soap*, const struct __ns1__GetPismoPdf *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPismoPdf(struct soap*, const char*, int, const struct __ns1__GetPismoPdf *, const char*);
SOAP_FMAC3 struct __ns1__GetPismoPdf * SOAP_FMAC4 soap_in___ns1__GetPismoPdf(struct soap*, const char*, struct __ns1__GetPismoPdf *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPismoPdf(struct soap*, const struct __ns1__GetPismoPdf *, const char*, const char*);

#ifndef soap_write___ns1__GetPismoPdf
#define soap_write___ns1__GetPismoPdf(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetPismoPdf(soap, data),0) || soap_put___ns1__GetPismoPdf(soap, data, "-ns1:GetPismoPdf", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetPismoPdf * SOAP_FMAC4 soap_get___ns1__GetPismoPdf(struct soap*, struct __ns1__GetPismoPdf *, const char*, const char*);

#ifndef soap_read___ns1__GetPismoPdf
#define soap_read___ns1__GetPismoPdf(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetPismoPdf(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetPismoPdf * SOAP_FMAC2 soap_instantiate___ns1__GetPismoPdf(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPismoPdf * soap_new___ns1__GetPismoPdf(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetPismoPdf(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetPismoPdf * soap_new_req___ns1__GetPismoPdf(struct soap *soap) { struct __ns1__GetPismoPdf *_p = soap_instantiate___ns1__GetPismoPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetPismoPdf(soap, _p); } return _p; }

inline struct __ns1__GetPismoPdf * soap_new_set___ns1__GetPismoPdf(struct soap *soap, ns2__DonatPismenoRequestDataContract *ns1__DonatPismoReq) { struct __ns1__GetPismoPdf *_p = soap_instantiate___ns1__GetPismoPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetPismoPdf(soap, _p); _p->ns1__DonatPismoReq = ns1__DonatPismoReq; } return _p; }

inline void soap_delete___ns1__GetPismoPdf(struct soap *soap, struct __ns1__GetPismoPdf *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetPismoPdf(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetObavijest
#define SOAP_TYPE___ns1__GetObavijest (86)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetObavijest(struct soap*, struct __ns1__GetObavijest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetObavijest(struct soap*, const struct __ns1__GetObavijest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetObavijest(struct soap*, const char*, int, const struct __ns1__GetObavijest *, const char*);
SOAP_FMAC3 struct __ns1__GetObavijest * SOAP_FMAC4 soap_in___ns1__GetObavijest(struct soap*, const char*, struct __ns1__GetObavijest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetObavijest(struct soap*, const struct __ns1__GetObavijest *, const char*, const char*);

#ifndef soap_write___ns1__GetObavijest
#define soap_write___ns1__GetObavijest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetObavijest(soap, data),0) || soap_put___ns1__GetObavijest(soap, data, "-ns1:GetObavijest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetObavijest * SOAP_FMAC4 soap_get___ns1__GetObavijest(struct soap*, struct __ns1__GetObavijest *, const char*, const char*);

#ifndef soap_read___ns1__GetObavijest
#define soap_read___ns1__GetObavijest(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetObavijest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetObavijest * SOAP_FMAC2 soap_instantiate___ns1__GetObavijest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetObavijest * soap_new___ns1__GetObavijest(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetObavijest(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetObavijest * soap_new_req___ns1__GetObavijest(struct soap *soap) { struct __ns1__GetObavijest *_p = soap_instantiate___ns1__GetObavijest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetObavijest(soap, _p); } return _p; }

inline struct __ns1__GetObavijest * soap_new_set___ns1__GetObavijest(struct soap *soap, ns2__DonatPismenoRequestDataContract *ns1__DonatObavijestReq) { struct __ns1__GetObavijest *_p = soap_instantiate___ns1__GetObavijest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetObavijest(soap, _p); _p->ns1__DonatObavijestReq = ns1__DonatObavijestReq; } return _p; }

inline void soap_delete___ns1__GetObavijest(struct soap *soap, struct __ns1__GetObavijest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetObavijest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetObavijestPdf
#define SOAP_TYPE___ns1__GetObavijestPdf (84)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetObavijestPdf(struct soap*, struct __ns1__GetObavijestPdf *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetObavijestPdf(struct soap*, const struct __ns1__GetObavijestPdf *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetObavijestPdf(struct soap*, const char*, int, const struct __ns1__GetObavijestPdf *, const char*);
SOAP_FMAC3 struct __ns1__GetObavijestPdf * SOAP_FMAC4 soap_in___ns1__GetObavijestPdf(struct soap*, const char*, struct __ns1__GetObavijestPdf *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetObavijestPdf(struct soap*, const struct __ns1__GetObavijestPdf *, const char*, const char*);

#ifndef soap_write___ns1__GetObavijestPdf
#define soap_write___ns1__GetObavijestPdf(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetObavijestPdf(soap, data),0) || soap_put___ns1__GetObavijestPdf(soap, data, "-ns1:GetObavijestPdf", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetObavijestPdf * SOAP_FMAC4 soap_get___ns1__GetObavijestPdf(struct soap*, struct __ns1__GetObavijestPdf *, const char*, const char*);

#ifndef soap_read___ns1__GetObavijestPdf
#define soap_read___ns1__GetObavijestPdf(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetObavijestPdf(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetObavijestPdf * SOAP_FMAC2 soap_instantiate___ns1__GetObavijestPdf(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetObavijestPdf * soap_new___ns1__GetObavijestPdf(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetObavijestPdf(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetObavijestPdf * soap_new_req___ns1__GetObavijestPdf(struct soap *soap) { struct __ns1__GetObavijestPdf *_p = soap_instantiate___ns1__GetObavijestPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetObavijestPdf(soap, _p); } return _p; }

inline struct __ns1__GetObavijestPdf * soap_new_set___ns1__GetObavijestPdf(struct soap *soap, ns2__DonatPismenoRequestDataContract *ns1__DonatObavijestReq) { struct __ns1__GetObavijestPdf *_p = soap_instantiate___ns1__GetObavijestPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetObavijestPdf(soap, _p); _p->ns1__DonatObavijestReq = ns1__DonatObavijestReq; } return _p; }

inline void soap_delete___ns1__GetObavijestPdf(struct soap *soap, struct __ns1__GetObavijestPdf *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetObavijestPdf(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetPrivola
#define SOAP_TYPE___ns1__GetPrivola (82)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPrivola(struct soap*, struct __ns1__GetPrivola *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPrivola(struct soap*, const struct __ns1__GetPrivola *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPrivola(struct soap*, const char*, int, const struct __ns1__GetPrivola *, const char*);
SOAP_FMAC3 struct __ns1__GetPrivola * SOAP_FMAC4 soap_in___ns1__GetPrivola(struct soap*, const char*, struct __ns1__GetPrivola *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPrivola(struct soap*, const struct __ns1__GetPrivola *, const char*, const char*);

#ifndef soap_write___ns1__GetPrivola
#define soap_write___ns1__GetPrivola(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetPrivola(soap, data),0) || soap_put___ns1__GetPrivola(soap, data, "-ns1:GetPrivola", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetPrivola * SOAP_FMAC4 soap_get___ns1__GetPrivola(struct soap*, struct __ns1__GetPrivola *, const char*, const char*);

#ifndef soap_read___ns1__GetPrivola
#define soap_read___ns1__GetPrivola(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetPrivola(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetPrivola * SOAP_FMAC2 soap_instantiate___ns1__GetPrivola(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPrivola * soap_new___ns1__GetPrivola(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetPrivola(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetPrivola * soap_new_req___ns1__GetPrivola(struct soap *soap, LONG64 ns1__KupacId) { struct __ns1__GetPrivola *_p = soap_instantiate___ns1__GetPrivola(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetPrivola(soap, _p); _p->ns1__KupacId = ns1__KupacId; } return _p; }

inline struct __ns1__GetPrivola * soap_new_set___ns1__GetPrivola(struct soap *soap, LONG64 ns1__KupacId) { struct __ns1__GetPrivola *_p = soap_instantiate___ns1__GetPrivola(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetPrivola(soap, _p); _p->ns1__KupacId = ns1__KupacId; } return _p; }

inline void soap_delete___ns1__GetPrivola(struct soap *soap, struct __ns1__GetPrivola *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetPrivola(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetPrivolaPdf
#define SOAP_TYPE___ns1__GetPrivolaPdf (80)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPrivolaPdf(struct soap*, struct __ns1__GetPrivolaPdf *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPrivolaPdf(struct soap*, const struct __ns1__GetPrivolaPdf *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPrivolaPdf(struct soap*, const char*, int, const struct __ns1__GetPrivolaPdf *, const char*);
SOAP_FMAC3 struct __ns1__GetPrivolaPdf * SOAP_FMAC4 soap_in___ns1__GetPrivolaPdf(struct soap*, const char*, struct __ns1__GetPrivolaPdf *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPrivolaPdf(struct soap*, const struct __ns1__GetPrivolaPdf *, const char*, const char*);

#ifndef soap_write___ns1__GetPrivolaPdf
#define soap_write___ns1__GetPrivolaPdf(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetPrivolaPdf(soap, data),0) || soap_put___ns1__GetPrivolaPdf(soap, data, "-ns1:GetPrivolaPdf", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetPrivolaPdf * SOAP_FMAC4 soap_get___ns1__GetPrivolaPdf(struct soap*, struct __ns1__GetPrivolaPdf *, const char*, const char*);

#ifndef soap_read___ns1__GetPrivolaPdf
#define soap_read___ns1__GetPrivolaPdf(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetPrivolaPdf(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetPrivolaPdf * SOAP_FMAC2 soap_instantiate___ns1__GetPrivolaPdf(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPrivolaPdf * soap_new___ns1__GetPrivolaPdf(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetPrivolaPdf(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetPrivolaPdf * soap_new_req___ns1__GetPrivolaPdf(struct soap *soap, LONG64 ns1__KupacId) { struct __ns1__GetPrivolaPdf *_p = soap_instantiate___ns1__GetPrivolaPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetPrivolaPdf(soap, _p); _p->ns1__KupacId = ns1__KupacId; } return _p; }

inline struct __ns1__GetPrivolaPdf * soap_new_set___ns1__GetPrivolaPdf(struct soap *soap, LONG64 ns1__KupacId) { struct __ns1__GetPrivolaPdf *_p = soap_instantiate___ns1__GetPrivolaPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetPrivolaPdf(soap, _p); _p->ns1__KupacId = ns1__KupacId; } return _p; }

inline void soap_delete___ns1__GetPrivolaPdf(struct soap *soap, struct __ns1__GetPrivolaPdf *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetPrivolaPdf(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetUgovor
#define SOAP_TYPE___ns1__GetUgovor (78)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetUgovor(struct soap*, struct __ns1__GetUgovor *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetUgovor(struct soap*, const struct __ns1__GetUgovor *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetUgovor(struct soap*, const char*, int, const struct __ns1__GetUgovor *, const char*);
SOAP_FMAC3 struct __ns1__GetUgovor * SOAP_FMAC4 soap_in___ns1__GetUgovor(struct soap*, const char*, struct __ns1__GetUgovor *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetUgovor(struct soap*, const struct __ns1__GetUgovor *, const char*, const char*);

#ifndef soap_write___ns1__GetUgovor
#define soap_write___ns1__GetUgovor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetUgovor(soap, data),0) || soap_put___ns1__GetUgovor(soap, data, "-ns1:GetUgovor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetUgovor * SOAP_FMAC4 soap_get___ns1__GetUgovor(struct soap*, struct __ns1__GetUgovor *, const char*, const char*);

#ifndef soap_read___ns1__GetUgovor
#define soap_read___ns1__GetUgovor(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetUgovor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetUgovor * SOAP_FMAC2 soap_instantiate___ns1__GetUgovor(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetUgovor * soap_new___ns1__GetUgovor(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetUgovor(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetUgovor * soap_new_req___ns1__GetUgovor(struct soap *soap) { struct __ns1__GetUgovor *_p = soap_instantiate___ns1__GetUgovor(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetUgovor(soap, _p); } return _p; }

inline struct __ns1__GetUgovor * soap_new_set___ns1__GetUgovor(struct soap *soap, ns2__DonatPismenoRequestDataContract *ns1__DonatUgovorReq) { struct __ns1__GetUgovor *_p = soap_instantiate___ns1__GetUgovor(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetUgovor(soap, _p); _p->ns1__DonatUgovorReq = ns1__DonatUgovorReq; } return _p; }

inline void soap_delete___ns1__GetUgovor(struct soap *soap, struct __ns1__GetUgovor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetUgovor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetUgovorPdf
#define SOAP_TYPE___ns1__GetUgovorPdf (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetUgovorPdf(struct soap*, struct __ns1__GetUgovorPdf *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetUgovorPdf(struct soap*, const struct __ns1__GetUgovorPdf *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetUgovorPdf(struct soap*, const char*, int, const struct __ns1__GetUgovorPdf *, const char*);
SOAP_FMAC3 struct __ns1__GetUgovorPdf * SOAP_FMAC4 soap_in___ns1__GetUgovorPdf(struct soap*, const char*, struct __ns1__GetUgovorPdf *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetUgovorPdf(struct soap*, const struct __ns1__GetUgovorPdf *, const char*, const char*);

#ifndef soap_write___ns1__GetUgovorPdf
#define soap_write___ns1__GetUgovorPdf(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetUgovorPdf(soap, data),0) || soap_put___ns1__GetUgovorPdf(soap, data, "-ns1:GetUgovorPdf", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetUgovorPdf * SOAP_FMAC4 soap_get___ns1__GetUgovorPdf(struct soap*, struct __ns1__GetUgovorPdf *, const char*, const char*);

#ifndef soap_read___ns1__GetUgovorPdf
#define soap_read___ns1__GetUgovorPdf(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetUgovorPdf(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetUgovorPdf * SOAP_FMAC2 soap_instantiate___ns1__GetUgovorPdf(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetUgovorPdf * soap_new___ns1__GetUgovorPdf(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetUgovorPdf(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetUgovorPdf * soap_new_req___ns1__GetUgovorPdf(struct soap *soap) { struct __ns1__GetUgovorPdf *_p = soap_instantiate___ns1__GetUgovorPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetUgovorPdf(soap, _p); } return _p; }

inline struct __ns1__GetUgovorPdf * soap_new_set___ns1__GetUgovorPdf(struct soap *soap, ns2__DonatPismenoRequestDataContract *ns1__DonatUgovorReq) { struct __ns1__GetUgovorPdf *_p = soap_instantiate___ns1__GetUgovorPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetUgovorPdf(soap, _p); _p->ns1__DonatUgovorReq = ns1__DonatUgovorReq; } return _p; }

inline void soap_delete___ns1__GetUgovorPdf(struct soap *soap, struct __ns1__GetUgovorPdf *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetUgovorPdf(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetZahtjev
#define SOAP_TYPE___ns1__GetZahtjev (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetZahtjev(struct soap*, struct __ns1__GetZahtjev *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetZahtjev(struct soap*, const struct __ns1__GetZahtjev *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetZahtjev(struct soap*, const char*, int, const struct __ns1__GetZahtjev *, const char*);
SOAP_FMAC3 struct __ns1__GetZahtjev * SOAP_FMAC4 soap_in___ns1__GetZahtjev(struct soap*, const char*, struct __ns1__GetZahtjev *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetZahtjev(struct soap*, const struct __ns1__GetZahtjev *, const char*, const char*);

#ifndef soap_write___ns1__GetZahtjev
#define soap_write___ns1__GetZahtjev(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetZahtjev(soap, data),0) || soap_put___ns1__GetZahtjev(soap, data, "-ns1:GetZahtjev", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetZahtjev * SOAP_FMAC4 soap_get___ns1__GetZahtjev(struct soap*, struct __ns1__GetZahtjev *, const char*, const char*);

#ifndef soap_read___ns1__GetZahtjev
#define soap_read___ns1__GetZahtjev(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetZahtjev(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetZahtjev * SOAP_FMAC2 soap_instantiate___ns1__GetZahtjev(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetZahtjev * soap_new___ns1__GetZahtjev(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetZahtjev(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetZahtjev * soap_new_req___ns1__GetZahtjev(struct soap *soap) { struct __ns1__GetZahtjev *_p = soap_instantiate___ns1__GetZahtjev(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetZahtjev(soap, _p); } return _p; }

inline struct __ns1__GetZahtjev * soap_new_set___ns1__GetZahtjev(struct soap *soap, ns2__DonatPismenoRequestDataContract *ns1__DonatZahtjevReq) { struct __ns1__GetZahtjev *_p = soap_instantiate___ns1__GetZahtjev(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetZahtjev(soap, _p); _p->ns1__DonatZahtjevReq = ns1__DonatZahtjevReq; } return _p; }

inline void soap_delete___ns1__GetZahtjev(struct soap *soap, struct __ns1__GetZahtjev *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetZahtjev(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetZahtjevPdf
#define SOAP_TYPE___ns1__GetZahtjevPdf (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetZahtjevPdf(struct soap*, struct __ns1__GetZahtjevPdf *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetZahtjevPdf(struct soap*, const struct __ns1__GetZahtjevPdf *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetZahtjevPdf(struct soap*, const char*, int, const struct __ns1__GetZahtjevPdf *, const char*);
SOAP_FMAC3 struct __ns1__GetZahtjevPdf * SOAP_FMAC4 soap_in___ns1__GetZahtjevPdf(struct soap*, const char*, struct __ns1__GetZahtjevPdf *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetZahtjevPdf(struct soap*, const struct __ns1__GetZahtjevPdf *, const char*, const char*);

#ifndef soap_write___ns1__GetZahtjevPdf
#define soap_write___ns1__GetZahtjevPdf(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetZahtjevPdf(soap, data),0) || soap_put___ns1__GetZahtjevPdf(soap, data, "-ns1:GetZahtjevPdf", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetZahtjevPdf * SOAP_FMAC4 soap_get___ns1__GetZahtjevPdf(struct soap*, struct __ns1__GetZahtjevPdf *, const char*, const char*);

#ifndef soap_read___ns1__GetZahtjevPdf
#define soap_read___ns1__GetZahtjevPdf(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetZahtjevPdf(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetZahtjevPdf * SOAP_FMAC2 soap_instantiate___ns1__GetZahtjevPdf(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetZahtjevPdf * soap_new___ns1__GetZahtjevPdf(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetZahtjevPdf(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetZahtjevPdf * soap_new_req___ns1__GetZahtjevPdf(struct soap *soap) { struct __ns1__GetZahtjevPdf *_p = soap_instantiate___ns1__GetZahtjevPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetZahtjevPdf(soap, _p); } return _p; }

inline struct __ns1__GetZahtjevPdf * soap_new_set___ns1__GetZahtjevPdf(struct soap *soap, ns2__DonatPismenoRequestDataContract *ns1__DonatZahtjevReq) { struct __ns1__GetZahtjevPdf *_p = soap_instantiate___ns1__GetZahtjevPdf(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetZahtjevPdf(soap, _p); _p->ns1__DonatZahtjevReq = ns1__DonatZahtjevReq; } return _p; }

inline void soap_delete___ns1__GetZahtjevPdf(struct soap *soap, struct __ns1__GetZahtjevPdf *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetZahtjevPdf(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, ns2__DonatPismenaFaultContract *ns2__DonatPismenaFaultContract_, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->ns2__DonatPismenaFaultContract_ = ns2__DonatPismenaFaultContract_; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (120)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTons2__DonatPismenoDataContract
#define SOAP_TYPE_PointerTons2__DonatPismenoDataContract (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DonatPismenoDataContract(struct soap*, ns2__DonatPismenoDataContract *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DonatPismenoDataContract(struct soap*, const char *, int, ns2__DonatPismenoDataContract *const*, const char *);
SOAP_FMAC3 ns2__DonatPismenoDataContract ** SOAP_FMAC4 soap_in_PointerTons2__DonatPismenoDataContract(struct soap*, const char*, ns2__DonatPismenoDataContract **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DonatPismenoDataContract(struct soap*, ns2__DonatPismenoDataContract *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DonatPismenoDataContract
#define soap_write_PointerTons2__DonatPismenoDataContract(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DonatPismenoDataContract(soap, data),0) || soap_put_PointerTons2__DonatPismenoDataContract(soap, data, "ns2:DonatPismenoDataContract", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DonatPismenoDataContract ** SOAP_FMAC4 soap_get_PointerTons2__DonatPismenoDataContract(struct soap*, ns2__DonatPismenoDataContract **, const char*, const char*);

#ifndef soap_read_PointerTons2__DonatPismenoDataContract
#define soap_read_PointerTons2__DonatPismenoDataContract(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DonatPismenoDataContract(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__DonatPismenoPdfDataContract
#define SOAP_TYPE_PointerTons2__DonatPismenoPdfDataContract (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DonatPismenoPdfDataContract(struct soap*, ns2__DonatPismenoPdfDataContract *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DonatPismenoPdfDataContract(struct soap*, const char *, int, ns2__DonatPismenoPdfDataContract *const*, const char *);
SOAP_FMAC3 ns2__DonatPismenoPdfDataContract ** SOAP_FMAC4 soap_in_PointerTons2__DonatPismenoPdfDataContract(struct soap*, const char*, ns2__DonatPismenoPdfDataContract **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DonatPismenoPdfDataContract(struct soap*, ns2__DonatPismenoPdfDataContract *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DonatPismenoPdfDataContract
#define soap_write_PointerTons2__DonatPismenoPdfDataContract(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DonatPismenoPdfDataContract(soap, data),0) || soap_put_PointerTons2__DonatPismenoPdfDataContract(soap, data, "ns2:DonatPismenoPdfDataContract", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DonatPismenoPdfDataContract ** SOAP_FMAC4 soap_get_PointerTons2__DonatPismenoPdfDataContract(struct soap*, ns2__DonatPismenoPdfDataContract **, const char*, const char*);

#ifndef soap_read_PointerTons2__DonatPismenoPdfDataContract
#define soap_read_PointerTons2__DonatPismenoPdfDataContract(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DonatPismenoPdfDataContract(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__DonatPismenoRequestDataContract
#define SOAP_TYPE_PointerTons2__DonatPismenoRequestDataContract (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DonatPismenoRequestDataContract(struct soap*, ns2__DonatPismenoRequestDataContract *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DonatPismenoRequestDataContract(struct soap*, const char *, int, ns2__DonatPismenoRequestDataContract *const*, const char *);
SOAP_FMAC3 ns2__DonatPismenoRequestDataContract ** SOAP_FMAC4 soap_in_PointerTons2__DonatPismenoRequestDataContract(struct soap*, const char*, ns2__DonatPismenoRequestDataContract **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DonatPismenoRequestDataContract(struct soap*, ns2__DonatPismenoRequestDataContract *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DonatPismenoRequestDataContract
#define soap_write_PointerTons2__DonatPismenoRequestDataContract(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DonatPismenoRequestDataContract(soap, data),0) || soap_put_PointerTons2__DonatPismenoRequestDataContract(soap, data, "ns2:DonatPismenoRequestDataContract", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DonatPismenoRequestDataContract ** SOAP_FMAC4 soap_get_PointerTons2__DonatPismenoRequestDataContract(struct soap*, ns2__DonatPismenoRequestDataContract **, const char*, const char*);

#ifndef soap_read_PointerTons2__DonatPismenoRequestDataContract
#define soap_read_PointerTons2__DonatPismenoRequestDataContract(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DonatPismenoRequestDataContract(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__DonatPismenaFaultContract
#define SOAP_TYPE_PointerTons2__DonatPismenaFaultContract (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DonatPismenaFaultContract(struct soap*, ns2__DonatPismenaFaultContract *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DonatPismenaFaultContract(struct soap*, const char *, int, ns2__DonatPismenaFaultContract *const*, const char *);
SOAP_FMAC3 ns2__DonatPismenaFaultContract ** SOAP_FMAC4 soap_in_PointerTons2__DonatPismenaFaultContract(struct soap*, const char*, ns2__DonatPismenaFaultContract **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DonatPismenaFaultContract(struct soap*, ns2__DonatPismenaFaultContract *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DonatPismenaFaultContract
#define soap_write_PointerTons2__DonatPismenaFaultContract(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DonatPismenaFaultContract(soap, data),0) || soap_put_PointerTons2__DonatPismenaFaultContract(soap, data, "ns2:DonatPismenaFaultContract", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DonatPismenaFaultContract ** SOAP_FMAC4 soap_get_PointerTons2__DonatPismenaFaultContract(struct soap*, ns2__DonatPismenaFaultContract **, const char*, const char*);

#ifndef soap_read_PointerTons2__DonatPismenaFaultContract
#define soap_read_PointerTons2__DonatPismenaFaultContract(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DonatPismenaFaultContract(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__DonatPismenoMetadataDataContract
#define SOAP_TYPE_PointerTons2__DonatPismenoMetadataDataContract (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DonatPismenoMetadataDataContract(struct soap*, ns2__DonatPismenoMetadataDataContract *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DonatPismenoMetadataDataContract(struct soap*, const char *, int, ns2__DonatPismenoMetadataDataContract *const*, const char *);
SOAP_FMAC3 ns2__DonatPismenoMetadataDataContract ** SOAP_FMAC4 soap_in_PointerTons2__DonatPismenoMetadataDataContract(struct soap*, const char*, ns2__DonatPismenoMetadataDataContract **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DonatPismenoMetadataDataContract(struct soap*, ns2__DonatPismenoMetadataDataContract *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DonatPismenoMetadataDataContract
#define soap_write_PointerTons2__DonatPismenoMetadataDataContract(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DonatPismenoMetadataDataContract(soap, data),0) || soap_put_PointerTons2__DonatPismenoMetadataDataContract(soap, data, "ns2:DonatPismenoMetadataDataContract", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DonatPismenoMetadataDataContract ** SOAP_FMAC4 soap_get_PointerTons2__DonatPismenoMetadataDataContract(struct soap*, ns2__DonatPismenoMetadataDataContract **, const char*, const char*);

#ifndef soap_read_PointerTons2__DonatPismenoMetadataDataContract
#define soap_read_PointerTons2__DonatPismenoMetadataDataContract(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DonatPismenoMetadataDataContract(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToint(soap, data),0) || soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__base64Binary
#define SOAP_TYPE_PointerToxsd__base64Binary (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap*, const char*, xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__base64Binary
#define soap_write_PointerToxsd__base64Binary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__base64Binary(soap, data),0) || soap_put_PointerToxsd__base64Binary(soap, data, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary **, const char*, const char*);

#ifndef soap_read_PointerToxsd__base64Binary
#define soap_read_PointerToxsd__base64Binary(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__string(soap, data),0) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToLONG64
#define SOAP_TYPE_PointerToLONG64 (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToLONG64(struct soap*, LONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToLONG64(struct soap*, const char *, int, LONG64 *const*, const char *);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToLONG64(struct soap*, const char*, LONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToLONG64(struct soap*, LONG64 *const*, const char*, const char*);

#ifndef soap_write_PointerToLONG64
#define soap_write_PointerToLONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToLONG64(soap, data),0) || soap_put_PointerToLONG64(soap, data, "long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToLONG64(struct soap*, LONG64 **, const char*, const char*);

#ifndef soap_read_PointerToLONG64
#define soap_read_PointerToLONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToLONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedByte
#define soap_write_PointerTounsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTounsignedByte(soap, data),0) || soap_put_PointerTounsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);

#ifndef soap_read_PointerTounsignedByte
#define soap_read_PointerTounsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTounsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
